// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:951

#ifndef DCPSDATAREADERI_H_
#define DCPSDATAREADERI_H_

#include "dds/DdsDcpsDataReaderRemoteS.h"
#include "dds/DCPS/Definitions.h"

#ifndef DDS_HAS_MINIMUM_BIT
#include "dds/DCPS/RTPS/RtpsInfo.h"
#endif

#include <vector>

#if !defined (ACE_LACKS_PRAGMA_ONCE)
#pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

//Class TAO_DDS_DCPSDataReader_i
class TAO_DDS_DCPSDataReader_i
  : public virtual POA_OpenDDS::DCPS::DataReaderRemote
{
public:
  enum Called { ENABLE_SPECIFIC, ADD_ASSOC, ASSOC_COMPLETE, REM_ASSOC, UPDATE_INCOMP_QOS };
  //Constructor
  TAO_DDS_DCPSDataReader_i (void);

  //Destructor
  virtual ~TAO_DDS_DCPSDataReader_i (void);


  virtual ::DDS::ReturnCode_t enable_specific (
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        )) { received_.push_back(ENABLE_SPECIFIC); return ::DDS::RETCODE_OK;};


  virtual void add_association (
      const ::OpenDDS::DCPS::RepoId& yourId,
      const OpenDDS::DCPS::WriterAssociation& writer,
      bool active
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void association_complete(const OpenDDS::DCPS::RepoId& /*remote_id*/)
    ACE_THROW_SPEC((CORBA::SystemException)) { received_.push_back(ASSOC_COMPLETE); }

  virtual void remove_associations (
      const OpenDDS::DCPS::WriterIdSeq & writers,
      ::CORBA::Boolean notify_lost
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void update_incompatible_qos (
      const OpenDDS::DCPS::IncompatibleQosStatus & status
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  size_t numReceived()
  {
    return (received_.size() - next_);
  }

  Called next()
  {
    return received_[next_++];
  }

#ifndef DDS_HAS_MINIMUM_BIT
  OpenDDS::RTPS::RtpsInfo* info_;
#endif
  DDS::DomainId_t domainId_;
  ::OpenDDS::DCPS::RepoId participantId_;
private:
  std::vector<Called> received_;
  size_t next_;
};


#endif /* DCPSDATAREADERI_H_  */
