

DCPS Layer
----------

This layer is mainly involved in the discovery switching logic.  The 
Service Paricipant and Domain Participant need to have options that 
control which discovery mechanism is used for each domain participant. 
This needs to be integrated into the existing code that determines and 
Info Repo for each DP.  The main interfaces between this layer and the 
one below are the DCPSInfo, DCPSDataReaderRemote, and 
DCPSDataWriterRemote IDL interfaces that the Info Repo uses and a BIT 
reader interface that will be used to inject BIT samples into the local 
data readers.  The BIT reader interfaces need to be pulled out of the 
existing code and exposed to the RTPS Discovery layer, including a 
"fake" data reader that can be fed from in-process data.  The existing 
IDL interfaces may need to be tweaked to support RTPS discovery, but we 
should be able to use them pretty much as is with a collocated CORBA 
object replacing the remote object references of the current discovery. 
We also need global configuration options to control this and other 
aspects of RTPS.


RTPS Discovery
--------------

The hope is that a lot of this code can be adapted from and shared with 
the existing Info Repo implementation.  One main difference is that 
instead of accumulating state from the IDL calls from the different 
participants, the state will be extracted from the RTPS Discovery 
Messaging layer below.  Most IDL calls from the local process will pass 
data through to the RTPS Discovery Messaging for sharing with other 
participants.  Some IDL calls will also cause "matching" to occur based 
on data queried from the Messaging layer.


RTPS Discovery Messaging
------------------------

The main components here are the custom Data Writers and Readers that 
will communicate the builtin topics that discovery is based upon.  They 
need to be custom because they (obviously) can't depend on the discovery 
layer and may need to use lower level interfaces on the transport layer 
to write (and possibly read) their messages.  They will also maintain 
their own state to handle resends, other spec-defined logic, and queries 
from the matching logic.

