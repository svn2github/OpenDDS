Wed Nov 16 14:50:35 UTC 2011  Jeff Schmitz  <schmitz_j@ociweb.com>

        * dds/DCPS/RTPS/ParameterListConverter.cpp:
        * tests/DCPS/UnitTests/ParameterListConverter.cpp:

          Set default values in target when none specificed in param list.
          Ignore vendor-specific params.
          Ignore optional params.
          Test the above.
          Remove commented-out test code.

Tue Nov 15 18:50:43 UTC 2011  Jeff Schmitz  <schmitz_j@ociweb.com>

        * dds/DCPS/RTPS/ParameterListConverter.h:
        * dds/DCPS/RTPS/ParameterListConverter.cpp:

          Fill out from_param_list() implementation.

        * tests/DCPS/UnitTests/ParameterListConverter.cpp:

          Test decoding param list in from_param_list().

Mon Nov 14 17:01:14 UTC 2011  Jeff Schmitz  <schmitz_j@ociweb.com>

        * dds/DCPS/RTPS/ParameterListConverter.cpp:

          Force guid prefix to have PID_PARTICIPANT_GUID

        * tests/DCPS/UnitTests/ParameterListConverter.cpp:

          Test encoding of expects inline qos, builtin endpoints, locators,
          and liveliness count.

Fri Nov 11 21:58:07 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/Discovery.cpp:

          Removed temporary code that was needed before RtpsDiscovery worked.

        * dds/DCPS/RTPS/RtpsInfo.h:
        * dds/DCPS/RTPS/RtpsInfo.cpp:
        * dds/DCPS/RTPS/Spdp.h:
        * dds/DCPS/RTPS/Spdp.cpp:

          Continued implementing RTPS Discovery.

        * dds/DCPS/Service_Participant.cpp:

          Changed shutdown order so that discovery objects are cleaned up
          before the POA and ORB are shut down.

        * dds/DdsDcpsInfo.idl:
        * dds/InfoRepo/DCPSInfo_i.h:
        * dds/InfoRepo/DCPSInfo_i.cpp:
        * tools/dissector/packet-repo.h:
        * tools/dissector/packet-repo.cpp:

          Removed unused "enable_topic()" operation on DCPSInfo.

        * tests/DCPS/ConfigFile/ConfigFile.cpp:

          Updated testing of RtpsDiscovery now that it returns an IOR.

        * docs/design/RTPS:

          fixed typo

Fri Nov 11 21:31:50 UTC 2011  Jeff Schmitz  <schmitz_j@ociweb.com>

        * dds/DCPS/RTPS/ParameterListConverter.h:
        * dds/DCPS/RTPS/ParameterListConverter.cpp:

          Handle guid prefix in to_param_list for participant data.
          Start of from_param_list for participant data.

        * tests/DCPS/UnitTests/ParameterListConverter.cpp:

          Some field-level validation of to_param_list for participant data.

Thu Nov 10 23:24:58 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/RTPS/RtpsDiscovery.h:
        * dds/DCPS/RTPS/RtpsDiscovery.cpp:
        * dds/DCPS/RTPS/RtpsInfo.h:
        * dds/DCPS/RTPS/RtpsInfo.cpp:

          Added a new class, RtpsInfo, which implementes the DCPSInfo
          IDL interface.  So far this is mostly just stubbed-out.

Thu Nov 10 22:35:33 UTC 2011  Jeff Schmitz  <schmitz_j@ociweb.com>

        * dds/DCPS/RTPS/ParameterListConverter.h:
        * dds/DCPS/RTPS/ParameterListConverter.cpp:

          Converter for ParameterLists.
          Converting parameter list to SPDPdiscoveredParticipantData.

        * tests/DCPS/UnitTests:

          svn:ignore updates.

        * tests/DCPS/UnitTests/UnitTests.mpc:

          Build UnitTests_ParameterListConverter.

Wed Nov  9 23:32:37 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/Discovery.h:
        * dds/DCPS/InfoRepoDiscovery.h:
        * dds/DCPS/InfoRepoDiscovery.cpp:
        * dds/DCPS/RTPS/RtpsDiscovery.h:
        * dds/DCPS/RTPS/RtpsDiscovery.cpp:
        * dds/DCPS/Registered_Data_Types.h:
        * dds/DCPS/Service_Participant.h:
        * dds/DCPS/Transient_Kludge.h:

          Minor code clean-up.  Removed VC6-specific warning disablers.

Wed Nov  9 19:20:30 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.cpp:

          Implemented config file variables for the rtps_udp transport.

        * dds/DCPS/transport/rtps_udp/RtpsUdpLoader.cpp:

          Disabled default transport.  We only want to provide an rtps_udp
          transport if the user asks for it (in code or in config file).

        * dds/DCPS/RTPS/BaseMessageUtils.h:
        * dds/DCPS/RTPS/RtpsDiscovery.h:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:

          Code clean-up: removed unnecessary stuff, added const where possible,
          added error logging.

        * docs/design/RTPS:

          Added design doc for RTPS, which includes list of items that
          are not currently implemented.

Tue Nov  8 18:25:52 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataSampleHeader.h:
        * dds/DCPS/DataSampleHeader.cpp:

          into_received_data_sample() now returns bool.

        * dds/DCPS/RTPS/MessageTypes.h:

          Added a constant for the size of the RTPS Message Header.

        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:

          If we receive a DATA Submessage with D = 0 and K = 0, don't
          deliver up to the datalink since we don't currently handle these.

        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.inl:

          Use constant from MessageTypes.h.

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:

          Added error/warning logging.

        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp:

          Added error/warning logging.
          Use a fixed message block, data block, and data buffer for the
          message header either used directly by control messages or copied
          into the send buffers for normal messages.

        * tests/transport/rtps_reliability/rtps_reliability.cpp:

          Fixed warning for signed vs. unsigned comparison.

Mon Nov  7 21:29:06 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DisjointSequence.h:
        * dds/DCPS/DisjointSequence.cpp:

          Added a contains() method to allow clients to check if a number
          is in the sequence.
          Made the bitmap "helper" public so it can be used elsewhere.

        * dds/DCPS/transport/framework/TransportReassembly.h:
        * dds/DCPS/transport/framework/TransportReassembly.cpp:

          Added methods to support RTPS fragment reassembly.

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:

          Implemented reliability for receiving fragmented data (receive
          HEARTBEAT_FRAG, send NACK_FRAG).

        * dds/idl/marshal_generator.cpp:

          Fixed the size of serialized FragmentNumberSet (it's 4 bytes smaller
          than SequenceNumberSet because the fragment numbers are 32-bit).

        * tests/DCPS/RtpsMessages/RtpsMessagesTest.cpp:

          Test for correct gen_find_size() results for all data types.

        * tests/transport/rtps_reliability/rtps_reliability.cpp:

          Test reliability features for fragmented data.

Wed Nov  2 16:19:39 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/framework/TransportReassembly.h:
        * dds/DCPS/transport/framework/TransportReassembly.cpp:
        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.h:
        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.inl:
        * dds/DCPS/transport/framework/TransportSendStrategy.h:
        * dds/DCPS/transport/framework/TransportSendStrategy.cpp:

          Changes to support use of TransportReassembly with RTPS data.

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:

          Handle incoming DATA_FRAG submessages.  Note that we are not
          currently generating fragments from OpenDDS Data Writers.
          Reliability for fragments (HEARTBEAT_FRAG, NACK_FRAG) is not yet
          implemented.

        * dds/DCPS/transport/udp/UdpDataLink.cpp:

          Use a common function in TransportSendStrategy for the
          ACE_Message_Block to iovec[] conversion.

        * tests/DCPS/UnitTests/Fragmentation.cpp:

          Added unit tests for TransportReassembly.

        * tests/transport/rtps_reliability/rtps_reliability.cpp:

          Added tests for DATA_FRAG.

Tue Nov  1 15:04:21 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * Merged from trunk r4989 through r5021.

Mon Oct 31 20:35:59 UTC 2011  Phil Mesnier  <mesnier_p@ociweb.com>

        * dds/DCPS/ConfigUtils.cpp:

          Fixed for building with DOC ACE. The dependency on ace/SString.h
          was implicit on older versions of ACE.

Mon Oct 31 14:23:29 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * dds/DCPS/Discovery.h:
        * dds/DCPS/Discovery.cpp:
        * dds/DCPS/RTPS/RtpsDiscovery.h:
        * dds/DCPS/RTPS/RtpsDiscovery.cpp:
        * dds/DCPS/Service_Participant.h:
        * dds/DCPS/Service_Participant.cpp:
        * tests/DCPS/ConfigFile/ConfigFile.cpp:
        * tests/DCPS/ConfigFile/test1.ini:

          Add some additional tests to ConfigFile for a variety of
          discovery configuration scenarios.  Add some resulting
          fixes, error checking, and refactoring that the testing
          directed.

        * docs/design/RTPS_DISCOVERY:

          Update the examples at the end of this file.  This is the
          best documentation to start with.

        * tests/DCPS/common/TestSupport.h:

          Fix an annoying spelling mistake in TEST_ASSERT.

Fri Oct 28 18:54:25 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * dds/DCPS/Discovery.h:
        * dds/DCPS/Discovery.cpp:
        * dds/DCPS/InfoRepoDiscovery.h:
        * dds/DCPS/InfoRepoDiscovery.cpp:
        * dds/DCPS/Service_Participant.h:
        * dds/DCPS/Service_Participant.cpp:
        * tools/monitor/MonitorTask.h:
        * tools/monitor/MonitorTask.cpp:

          Changes necessary to get the Monitor tool compiling and running
          with the new Discovery scheme.  Once again, the monitor tool
          needs to be revisited in the cotext of RTPS discovery (among
          other things).

Thu Oct 27 23:54:01 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * java/dds/OpenDDS/DCPS/TheServiceParticipant.java:
        * java/dds/OpenDDS_DCPS_jni.cpp:
        * java/tests/multirepo/MultiRepoBase.java:

          Fix java problems caused by the Discovery changes below.
          The biggest impact of these changes is that
          ServiceParticipant::RepoKey was moved into the Discovery
          class and went from being an int to a string.

Thu Oct 27 21:06:32 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * dds/DCPS/ConfigUtils.h:
        * dds/DCPS/ConfigUtils.cpp:
        * dds/DCPS/Discovery.h:
        * dds/DCPS/Discovery.cpp:
        * dds/DCPS/DomainParticipantImpl.cpp:
        * dds/DCPS/FailoverListener.h:
        * dds/DCPS/FailoverListener.cpp:
        * dds/DCPS/InfoRepoDiscovery.h:
        * dds/DCPS/InfoRepoDiscovery.cpp:
        * dds/DCPS/InfoRepoUtils.h:
        * dds/DCPS/RTPS/RtpsDiscovery.h:
        * dds/DCPS/RTPS/RtpsDiscovery.cpp:
        * dds/DCPS/Service_Participant.h:
        * dds/DCPS/Service_Participant.inl:
        * dds/DCPS/Service_Participant.cpp:
        * dds/DCPS/transport/framework/TransportRegistry.h:
        * dds/DCPS/transport/framework/TransportRegistry.cpp:
        * dds/InfoRepo/DCPSInfoRepoServ.cpp:
        * dds/InfoRepo/FederatorManagerImpl.cpp:
        * docs/design/RTPS_DISCOVERY:
        * tests/DCPS/ConfigFile/test1.ini:
        * tests/DCPS/MultiRepoTest/DataWriterListenerImpl.h:
        * tests/DCPS/MultiRepoTest/DataWriterListenerImpl.cpp:
        * tests/DCPS/MultiRepoTest/ForwardingListener.h:
        * tests/DCPS/MultiRepoTest/ForwardingListener.cpp:
        * tests/DCPS/MultiRepoTest/TestMonitor.h:
        * tests/DCPS/MultiRepoTest/TestMonitor.cpp:
        * tests/DCPS/MultiRepoTest/TestSystem.cpp:
        * tests/DCPS/unit/run_test.pl:
        * tests/transport/rtps/run_test.pl:

          Refactoring to allow optional configuration of RTPS
          as a Discovery mechanism.  See docs/design/RTPS_DISCOVERY
          for some design details.  This is a work in progress
          but existing InfoRepo configuration should work as
          before.  RTPS discovery is not hooked into any actual
          code and will fail.

Thu Oct 27 18:00:00 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:

          Set the Multicast flag in INFO_REPLY if we have multicast.
          Fixed 0-length bitmap in ACKNACK submessages if no nacks.

Thu Oct 27 15:59:24 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * tests/transport/rtps_reliability/rtps_reliability.cpp:

          Fixed GCC warning for char array subscripting.

Thu Oct 27 15:54:11 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:

          Update sequence number tracking for GAP generation to reflect
          the newer sequence number scheme in the DataWriterImpl.

        * tests/transport/rtps_reliability/rtps_reliability.cpp:

          Clean up test.  Added testing of writer-side reliability.

Wed Oct 26 22:45:23 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * tests/transport/rtps_reliability/rtps_reliability.cpp:

          Corrected calls to ACE_Reactor API.

Wed Oct 26 22:35:54 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp:

          Fixed bugs found during testing.

        * tests/transport/rtps/publisher.cpp:

          Let the Data Writer send HEARTBEAT messages.

        * bin/dcps_tests.lst:
        * tests/transport/rtps_reliability/DDS_transport_rtps_reliability.mpc:
        * tests/transport/rtps_reliability/rtps_reliability.cpp:
        * tests/transport/rtps_reliability/run_test.pl:

          Added a new transport-level test for RTPS Reliability features.

Wed Oct 26 18:49:57 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * tests/DCPS/UnitTests/DisjointSequence.cpp:

          Added casts to avoid signed/unsigned comparison warnings.

Tue Oct 25 18:30:43 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DisjointSequence.h:
        * dds/DCPS/DisjointSequence.inl:
        * dds/DCPS/DisjointSequence.cpp:

          Added new methods to support generating RTPS ACKNACK submessages.

        * dds/DCPS/GuidUtils.h:

          Support comparison (== and !=) of the EntityId_t portion of GUIDs
          in addition to the full GUID comparisons.

        * dds/DCPS/RTPS/MessageTypes.h:

          Added another common RTPS constant, for size of INFO_DST submessages.

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:

          Completed initial implementation of the DataReader side of the
          RTPS Reliablity protocol (receive HEARTBEAT, DATA, GAP, generate
          ACKNACK along with its INFO_DST and INFO_REPLY).

        * tests/DCPS/UnitTests/DisjointSequence.cpp:

          Test new functionality in DisjointSequence.

Mon Oct 24 19:20:33 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DisjointSequence.cpp:

          Now that it compiles, make it pass the test.

Mon Oct 24 18:58:13 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DisjointSequence.cpp:

          GCC's STL implementation is more strict, we can't modify in-place.

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:

          Fix a warning in struct initializer.

Mon Oct 24 18:30:53 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DisjointSequence.h:
        * dds/DCPS/DisjointSequence.cpp:

          Added methods for converting to/from the RTPS bitmap representation.

        * dds/DCPS/RTPS/GuidGenerator.h:
        * dds/DCPS/RTPS/GuidGenerator.cpp:

          Updated to compile on VC++.

        * dds/DCPS/transport/framework/TransportSendBuffer.h:
        * dds/DCPS/transport/framework/TransportSendBuffer.cpp:

          Allow for external locking so single lock can be held across
          multiple calls to resend()/resend_i().

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp:

          Completed the initial implementation of the DataWriter side of the
          RTPS Reliablity protocol (generate HEARTBEAT and GAP, ability to
          resend DATA, receive ACKNACK).

        * tests/DCPS/UnitTests/DisjointSequence.cpp:

          Unit tests for new DisjointSequence functionality.

Mon Oct 24 18:17:31 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/GuidBuilder.h:
        * dds/DCPS/GuidBuilder.inl:
        * dds/DCPS/GuidConverter.h:
        * dds/DCPS/RepoIdBuilder.h:
        * dds/DCPS/RepoIdBuilder.inl:

          Rolled-back changes from prior commit.  (No emacs hints in OpenDDS.)

        * dds/DCPS/RTPS/GuidGenerator.h:

          Moved comment from GuidConverter.h here.

Mon Oct 24 17:07:44 UTC 2011  Phil Mesnier  <mesnier_p@ociweb.com>

        * MPC/config/dcps_rtpsexe.mpb:

          New base project to support executables that depend on RTPS.

        * dds/DCPS/GuidBuilder.h:
        * dds/DCPS/GuidBuilder.inl:
        * dds/DCPS/GuidConverter.h:
        * dds/DCPS/RepoIdBuilder.h:
        * dds/DCPS/RepoIdBuilder.inl:

          Added emacs mode hints and documented RTPS based GUID_t octet
          layout.

        * dds/DCPS/RTPS/GuidGenerator.h:
        * dds/DCPS/RTPS/GuidGenerator.cpp:

          New implementation of the RTPS GUID generator. Makes use of
          hosts' primary MAC address (or random numbers if no MAC present)
          plus the 16 bit process ID, plus a counter to generate a unique
          ID. Probably a time value should be part of it tool, since PID
          has the potential of being non-unique but there isn't enough
          room for a timestamp too.

        * tests/DCPS/UnitTests/GuidGenerator.cpp:
        * tests/DCPS/UnitTests/UnitTests.mpc:

          Added a new unit test to validate the GUID generator.

Thu Oct 20 13:01:31 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * docs/design/RTPS Discovery.jpg:
        * docs/design/RTPS Discovery.odg:
        * docs/design/RTPS_DISCOVERY:

          Add some design docs having to do with the overall RTPS
          discovery design.

Wed Oct 19 19:10:35 UTC 2011  Phil Mesnier  <mesnier_p@ociweb.com>

        * dds/DCPS/transport/framework/TransportStrategy.h:

          Need to specifically include Synch_Traits.h so we can build
          against ACE 6.0.5+.

Wed Oct 19 17:52:38 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DisjointSequence.h:
        * dds/DCPS/DisjointSequence.inl:
        * dds/DCPS/DisjointSequence.cpp:

          Significant rework of DisjointSequence.  Added doxygen comments.
          What used to be update() is now insert(), what used to be
          lowest_valid() is now another form of insert(), and what used to be
          low() is now either low() or cumulative_ack() depending on the usage.
          DisjointSequence no longer handles wrapping SequenceNumbers, but the
          64-bit sequence numbers don't wrap (under real-world conditions).

        * dds/DCPS/RTPS/MessageTypes.h:

          Moved another useful constant up to this header.

        * dds/DCPS/transport/framework/TransportSendBuffer.h:
        * dds/DCPS/transport/framework/TransportSendBuffer.cpp:

          Cleaned up unused #includes.

        * dds/DCPS/transport/framework/TransportSendStrategy.h:
        * dds/DCPS/transport/framework/TransportSendStrategy.cpp:

          Refactored code that makes iovec[]s from ACE_Message_Block chains
          so that it can be reused by derived classes.

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp:

          Continued implementing RTPS reliablity, focusing for now on DW side:
          - mechanism for generating control messages in the transport
          - timers for sending heartbeats and replying to nacks
          - processing incoming AckNackSubmessage
          Also, on DR side: hook for keeping track of received sequence numbers

        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/transport/multicast/ReliableSession.h:
        * dds/DCPS/transport/multicast/ReliableSession.cpp:
        * performance-tests/DCPS/MulticastListenerTest/DataReaderListener.cpp:
        * tests/DCPS/UnitTests/DisjointSequence.cpp:

          Updated usage of DisjointSequence.

Mon Oct 17 21:19:19 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/DataWriterImpl.h:
        * dds/DCPS/DataWriterImpl.cpp:
        * dds/DCPS/Definitions.h:

          Start sequence numbers in the data writer with one.
          Add valid sequence numbers to instance state control
          messages and properly process them in the reader.

Fri Oct 14 19:36:50 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/RTPS/MessageTypes.h:

          Add a constant for the size of SubmessageHeader.

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:

          For reliable writers, track the current sequence number and generate
          GAP submessages when needed.  On the receive side, added a
          gap_received() method, but it doesn't do anything yet.

        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          Generate/expect a gap in the sequence numbers used in the test.

Fri Oct 14 14:23:44 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/DataSampleHeader.h:
        * dds/DCPS/DataSampleHeader.cpp:
        * dds/DCPS/DataWriterImpl.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:

          Add support for combined Dispose/Unregister messages.
          This was added as a new message type in DataSampleHeader.
          OpenDDS does not currently generate these messages, but
          may receive them from other RTPS implementations.

        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          Test manual generation and processing of Dispose/Unregister
          messages via RTPS.

Fri Oct 14 13:18:09 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * tests/transport/rtps/publisher.cpp:

          Fix some unused arg warnings.

Thu Oct 13 21:44:30 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * Merged from trunk r4965 through r4988.

Thu Oct 13 21:12:39 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * dds/DCPS/Qos_Helper.h:
        * dds/DCPS/Qos_Helper.inl:

          Add operator!=() implementations for the qos policy structs.
          Clean up some of the macro hell.

        * dds/DCPS/transport/framework/TransportSendControlElement.h:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * tests/transport/rtps/publisher.cpp:

          Clean up some of the inline QoS code.  Add support for
          inline QoS to the control variants of the Data submessage.
          Add support for the remaining inline QoS policies.

Thu Oct 13 20:57:30 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/DataWriterImpl.cpp:
        * dds/DCPS/transport/framework/TransportClient.h:
        * dds/DCPS/transport/framework/TransportClient.cpp:

          TransportClient::enable_transport() now gets a bool for "reliable".

        * dds/DCPS/RepoIdGenerator.h:

          Updated comment about VendorId inside the GUID.

        * dds/DCPS/transport/framework/DataLink.h:
        * dds/DCPS/transport/framework/DataLink.cpp:

          Added hook for derived classes to get release_reservations().

        * dds/DCPS/transport/framework/TransportImpl.h:
        * dds/DCPS/transport/framework/TransportImpl.cpp:

          Pass "reliable" bool down to the specific transport object.

        * dds/DCPS/transport/framework/TransportQueueElement.h:
        * dds/DCPS/transport/framework/TransportCustomizedElement.h:
        * dds/DCPS/transport/framework/TransportCustomizedElement.inl:
        * dds/DCPS/transport/framework/TransportSendControlElement.h:
        * dds/DCPS/transport/framework/TransportSendControlElement.inl:
        * dds/DCPS/transport/framework/TransportSendElement.h:
        * dds/DCPS/transport/framework/TransportSendElement.inl:

          TransportQueueElements can now report their sequence numbers.

        * dds/DCPS/transport/framework/TransportSendBuffer.h:

          Updated SingleSendBuffer for use in RtpsUdpDataLink.

        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.cpp:

          Expose a "nak_depth" configuration parameter.

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.inl:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp:

          Started implementing reliability features of RTPS (support
          for HEARTBEAT, ACKNACK, and GAP submessages).

        * dds/DCPS/transport/tcp/TcpTransport.h:
        * dds/DCPS/transport/tcp/TcpTransport.cpp:
        * dds/DCPS/transport/multicast/MulticastTransport.h:
        * dds/DCPS/transport/multicast/MulticastTransport.cpp:
        * dds/DCPS/transport/udp/UdpTransport.h:
        * dds/DCPS/transport/udp/UdpTransport.cpp:

          Updated for changes in TransportImpl.

        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:
        * tests/transport/simple/PubDriver.cpp:
        * tests/transport/simple/SubDriver.cpp:

          TransportClient::enable_transport() now requires an argument.

Wed Oct 12 20:51:13 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * dds/DCPS/DataWriterImpl.h:
        * dds/DCPS/DataWriterImpl.cpp:
        * dds/DCPS/transport/framework/TransportSendListener.h:
        * dds/DCPS/transport/framework/TransportSendListener.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:

          Add supporrt for inline Qos parameters.  This feature
          adds the requires_inline_qos() function for RtpsUdpDataLink
          and the retrieve_inline_qos_data() function for
          TransportSendListeners.  Not all QoS parameters are supported
          in this commit (currently only topic_name, partition, and
          presentation).

        * tests/transport/rtps/publisher.cpp:

        * dds/idl/marshal_generator.cpp:

          Fix a marshaling error for Parameters (involves missing
          padding).

Wed Oct 12 20:20:32 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/framework/TransportSendBuffer.h:
        * dds/DCPS/transport/framework/TransportSendBuffer.inl:
        * dds/DCPS/transport/framework/TransportSendBuffer.cpp:
        * dds/DCPS/transport/framework/TransportSendStrategy.h:
        * dds/DCPS/transport/framework/TransportSendStrategy.cpp:

          Refactored TransportSendBuffer into two classes, TSB is now the
          abstract base class representing the interface that
          TransportSendStrategy needs.  The new class SingleSendBuffer
          represents the existing use-case for multicast, where a single
          TSB object is all that's needed per datalink.  TSB is no longer
          a reference-counted object, it's always owned by the datalink.

        * dds/DCPS/transport/multicast/MulticastDataLink.h:
        * dds/DCPS/transport/multicast/MulticastDataLink.inl:
        * dds/DCPS/transport/multicast/MulticastDataLink.cpp:
        * dds/DCPS/transport/multicast/MulticastSession.cpp:
        * dds/DCPS/transport/multicast/ReliableSession.cpp:

          Adjusted use of TransportSendBuffer to account for the changes above.

        * dds/DCPS/transport/framework/TransportSendBuffer_rch.h:

          Removed this file.

Wed Oct 12 15:00:13 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * bin/dcps_tests.lst:
        * tests/DCPS/Messenger/Messenger.mpc:
        * tests/DCPS/Messenger/publisher.cpp:
        * tests/DCPS/Messenger/stack_subscriber.cpp:
        * tests/DCPS/Messenger/subscriber.cpp:

          Updated test to allow static linking to rtps_udp transport lib.

Wed Oct 12 14:44:57 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.h:

          Updated comment to reflect that there are two populate* functions.

        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.cpp:

          Moved #include to the proper file.

        * tests/transport/rtps/publisher.cpp:

          Fixed typo in comment.

Tue Oct 11 16:11:13 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * dds/DCPS/DataDurabilityCache.cpp:
        * dds/DCPS/DataSampleHeader.h:
        * dds/DCPS/DataSampleHeader.inl:
        * dds/DCPS/DataSampleList.h:
        * dds/DCPS/DataSampleList.inl:
        * dds/DCPS/DataWriterImpl.h:
        * dds/DCPS/DataWriterImpl.cpp:
        * dds/DCPS/WriteDataContainer.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * tests/transport/rtps/publisher.cpp:

          Add a DataSampleHeader to the DataSampleListElement.
          Remove the sequence number and source timestamp members
          of the DSLE (they are redundant with those in the header).

Mon Oct 10 16:04:48 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/DataWriterImpl.h:
        * dds/DCPS/DataWriterImpl.cpp:
        * dds/DCPS/transport/framework/DataLink.h:
        * dds/DCPS/transport/framework/DataLink.cpp:
        * dds/DCPS/transport/framework/DataLinkSet.h:
        * dds/DCPS/transport/framework/DataLinkSet.inl:
        * dds/DCPS/transport/framework/TransportClient.h:
        * dds/DCPS/transport/framework/TransportClient.cpp:
        * dds/DCPS/transport/framework/TransportSendControlElement.h:
        * dds/DCPS/transport/framework/TransportSendControlElement.inl:
        * dds/DCPS/transport/framework/TransportSendListener.h:
        * dds/DCPS/transport/multicast/MulticastSession.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:

          Rework the RTPS control message processing to use
          a TransportSendControlElement instead of a TransportSendElement.
          In order for this to work the DataSampleHeader was passed along
          the send control path and stored in the TSCE.

        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          Modify the test to send RTPS control messages as TSCEs
          (this more accurately reflects the DCPS behavior).

Fri Oct  7 18:06:11 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.cpp:

          Updated log message to identify the correct method.

        * dds/DCPS/transport/framework/DataLink.h:
        * dds/DCPS/transport/framework/DataLink.cpp:

          Provide a hook for derived classes to know when a remote
          RepoId is no longer associated to any local user of this link.

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.inl:

          Use the above hook to remove entries from the
          locators_ map when remote peers disassociate.

        * tests/DCPS/Messenger/rtps.ini:
        * tests/DCPS/Messenger/run_test.pl:

          Updated test to acutally use the rtps_udp transport.

Thu Oct  6 18:26:22 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/framework/DataLink.h:
        * dds/DCPS/transport/framework/DataLink.cpp:

          Moved operator<< into our namespace.
          Added a peer_ids() protected method so that the derived DataLink
          class can get of list of GUIDs that this DataLink is associated with.

        * dds/DCPS/transport/framework/TransportSendStrategy.h:
        * dds/DCPS/transport/framework/TransportSendStrategy.inl:

          Added a current_packet_first_element() protected method so that the
          derived SendStrategy can peek at the elems_ queue in order to get
          contextual information about what's being sent.

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.inl:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp:

          Continued implementing transport.  Use RTPS Locators for the blob.
          Track and use per-association remote network addresses.

        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          ORB_init() no longer needed since datalink_release_delay_ is off.
          Modified publisher to use the transport blob instead of "cheating"
          by setting the remote_address_ in the TransportInst.

Thu Oct  6 15:58:46 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * tests/transport/rtps/publisher.cpp:

          Fix some linux/gcc compilation issues.

Thu Oct  6 15:07:54 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          Oops, left in some extra print statements.

Thu Oct  6 14:13:33 UTC 2011  Paul Calabrese  <calabrese_p@ociweb.com>

        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/DataSampleHeader.h:
        * dds/DCPS/DataSampleHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:

          Add support for instance state messages (instance registration,
          dispose instance, and unregister instance).

        * tests/transport/rtps/TestMsg.h:
        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          Test new messages and refactor the test some.

Fri Sep 30 20:05:49 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/framework/TransportImpl.h:

          blob_to_key() is not called from the framework so it doesn't need
          to be pure virtual here.

        * dds/DCPS/transport/multicast/MulticastTransport.h:
        * dds/DCPS/transport/tcp/TcpTransport.h:
        * dds/DCPS/transport/udp/UdpTransport.h:

          blob_to_key() is no longer virtual.

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.inl:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp:

          Continued developing the transport for RTPS.
          Starting to track the remote "locators" so the send strategy knows
          where to send messages.  Not done yet.

Thu Sep 29 22:22:00 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/framework/TransportCustomizedElement.cpp:

          Check for null orig_ pointer in msg_payload().

        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.h:
        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.cpp:

          Allow derived Receive Strategies to register multiple handles with
          the reactor.  The active handle is passed to (newly renamed)
          handle_dds_input() and on to receive_bytes().

        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.inl:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp:

          Added multicast socket to RtpsUdpDataLink.
          Use allocator from DataSampleListElement when creating
          TransportCustomizedElements in RtpsUdpDataLink.
          Continued implementing RtpsUdpTransport.

        * dds/DCPS/transport/tcp/TcpConnection.cpp:
        * dds/DCPS/transport/tcp/TcpReceiveStrategy.h:
        * dds/DCPS/transport/tcp/TcpReceiveStrategy.cpp:
        * dds/DCPS/transport/multicast/MulticastReceiveStrategy.h:
        * dds/DCPS/transport/multicast/MulticastReceiveStrategy.cpp:
        * dds/DCPS/transport/udp/UdpReceiveStrategy.h:
        * dds/DCPS/transport/udp/UdpReceiveStrategy.cpp:

          Adapt other transports to the framework change above.

        * tests/transport/rtps/run_test.pl:

          Test with multicast in addition to unicast.

Thu Sep 29 19:32:07 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * Merged from trunk r4942 through r4964.

Thu Sep 29 14:41:50 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.cpp:

          Fix for the prior change to this file from Tuesday.
          "We are done - no more data" check needs to go after potentially
          delivering the data sample to the receive listener(s).

Thu Sep 29 14:19:32 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataWriterImpl.cpp:

          In create_control_message(), allow for null ACE_Message_Block of data.

        * dds/DCPS/GuidUtils.h:

          Overload operator!=() to match operator==().

        * dds/DCPS/transport/framework/DataLink.h:
        * dds/DCPS/transport/framework/DataLink.inl:
        * dds/DCPS/transport/framework/DataLinkSet.h:
        * dds/DCPS/transport/framework/DataLinkSet.inl:
        * dds/DCPS/transport/framework/TransportClient.cpp:
        * dds/DCPS/transport/framework/TransportDefs.h:

          Updated remove_sample() and remove_all_msgs() method signatures.

        * dds/DCPS/transport/framework/PacketRemoveVisitor.h:
        * dds/DCPS/transport/framework/PacketRemoveVisitor.inl:
        * dds/DCPS/transport/framework/PacketRemoveVisitor.cpp:
        * dds/DCPS/transport/framework/QueueRemoveVisitor.h:
        * dds/DCPS/transport/framework/QueueRemoveVisitor.inl:
        * dds/DCPS/transport/framework/QueueRemoveVisitor.cpp:
        * dds/DCPS/transport/framework/ThreadPerConRemoveVisitor.h:
        * dds/DCPS/transport/framework/ThreadPerConRemoveVisitor.inl:
        * dds/DCPS/transport/framework/ThreadPerConRemoveVisitor.cpp:
        * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.h:
        * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp:
        * dds/DCPS/transport/framework/TransportControlElement.h:
        * dds/DCPS/transport/framework/TransportControlElement.inl:
        * dds/DCPS/transport/framework/TransportCustomizedElement.h:
        * dds/DCPS/transport/framework/TransportCustomizedElement.cpp:
        * dds/DCPS/transport/framework/TransportQueueElement.h:
        * dds/DCPS/transport/framework/TransportQueueElement.inl:
        * dds/DCPS/transport/framework/TransportQueueElement.cpp:
        * dds/DCPS/transport/framework/TransportReplacedElement.h:
        * dds/DCPS/transport/framework/TransportReplacedElement.inl:
        * dds/DCPS/transport/framework/TransportRetainedElement.h:
        * dds/DCPS/transport/framework/TransportRetainedElement.inl:
        * dds/DCPS/transport/framework/TransportRetainedElement.cpp:
        * dds/DCPS/transport/framework/TransportSendBuffer.cpp:
        * dds/DCPS/transport/framework/TransportSendControlElement.h:
        * dds/DCPS/transport/framework/TransportSendControlElement.cpp:
        * dds/DCPS/transport/framework/TransportSendElement.h:
        * dds/DCPS/transport/framework/TransportSendElement.cpp:
        * dds/DCPS/transport/framework/TransportSendStrategy.h:
        * dds/DCPS/transport/framework/TransportSendStrategy.cpp:

          Revamped comparison of TransportQueueElements.  This allows
          remove_sample() to find customized elements in the queues.
          TransportQueueElements are no longer created just for the sake of
          comparison.  Track the status of removal in visitor status instead of
          using the TransportQueueElement::released() bool.

Tue Sep 27 21:53:51 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/framework/TransportCustomizedElement.cpp:

          release_element() also needs to delete the TCE when there is
          no allocator (using an allocator is optional with this class).

        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.cpp:

          If the DataSampleHeader (or RTPS SubmessageHeader) indicates that
          there is no data payload, don't allocate a Message Block for it.
          Users of ReceivedDataSample need to check for a null sample_ pointer.

        * dds/DCPS/transport/framework/ReceiveListenerSet.inl:
        * dds/DCPS/transport/multicast/MulticastDataLink.cpp:

          Account for the fact that ReceivedDataSample::sample_ may be null.

        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp:

          Fix a leaked refcount on the reactor task.

        * tests/DCPS/ConfigFile/ConfigFile.cpp:

          Prevent Service_Participant from spawning a thread for ORB::run.

        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          Improve shutdown and cleanup to get a clean valgrind run.

Tue Sep 27 16:00:45 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:

          Fixed bug where octetsToNextHeader was calculated incorrectly when
          the submessage header omits it.

        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          Extend the test, fixed bugs in use of message blocks in serialization.

Fri Sep 23 23:27:28 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataSampleList.h:
        * dds/DCPS/DataWriterImpl.cpp:
        * dds/DCPS/RTPS/BaseMessageTypes.h:
        * dds/DCPS/RTPS/MessageTypes.h:
        * dds/DCPS/RTPS/RtpsBaseMessageTypes.idl:
        * dds/DCPS/RTPS/RtpsMessageTypes.idl:
        * dds/DCPS/transport/framework/DataLink.h:
        * dds/DCPS/transport/framework/DataLink.inl:
        * dds/DCPS/transport/framework/DataLinkSet.inl:
        * dds/DCPS/transport/framework/TransportCustomizedElement.h:
        * dds/DCPS/transport/framework/TransportCustomizedElement.inl:
        * dds/DCPS/transport/framework/TransportCustomizedElement.cpp:
        * dds/DCPS/transport/framework/TransportSendStrategy.h:
        * dds/DCPS/transport/framework/TransportSendStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp:

          Began implementing specific TransportSendStrategy and framework
          support for sending messages with alternate (non-OpenDDS) headers.

        * dds/idl/marshal_generator.cpp:

          More support for serialization of special RTPS types (Submessage).

        * tests/DCPS/RtpsMessages/RtpsMessagesTest.cpp:
        * tests/transport/rtps/DDS_transport_rtps.mpc:
        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          Extended test to use the transport on the publishing side as well.
          The transport test is not yet working.

Fri Sep 16 22:12:09 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataSampleHeader.h:
        * dds/DCPS/DataSampleHeader.inl:
        * dds/DCPS/DataSampleHeader.cpp:
        * tools/dissector/packet-opendds.cpp:

          Use a free bit in the 2nd flag byte to indicate "key only" marshaling.

        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/DataWriterImpl.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/idl/CPPTemplate.txt:

          Make use of that flag instead of a always assuming that the "instance
          control" types of messages are key-only.  This will allow us to
          interoperate with other RTPS implementations that send the entire
          data sample payload in instance control messages.

Fri Sep 16 19:37:52 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          More cleanup for older ACE that has no ostream << ACE_Time_Value.

Fri Sep 16 18:35:03 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:

          Use an easier constant for the fractional seconds conversion.

        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          Clean up test to work on earlier ACE+TAO versions.

Fri Sep 16 18:21:52 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/multicast/MulticastReceiveStrategy.h:
        * dds/DCPS/transport/multicast/MulticastReceiveStrategy.cpp:
        * dds/DCPS/transport/multicast/ReliableSession.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/udp/UdpReceiveStrategy.h:
        * dds/DCPS/transport/udp/UdpReceiveStrategy.cpp:

          Fix compile errors on older GCC versions.

Fri Sep 16 16:29:29 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.inl:

          Cleanup from yesterday's commit.

        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          Enhance test -- actually check what we receive.

Thu Sep 15 23:01:58 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * MPC/config/dcps_rtps_udp.mpb:

          New base project for linking the RTPS/UDP transport library.

        * dds/DCPS/transport/framework/TransportClient.cpp:

          Fixed a bug found during testing.  Bug only occurs when the
          destructor runs while there are still datalinks, which shouldn't
          happen in real use cases.

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.inl:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp:

          Continued implementation.

        * bin/dcps_tests.lst:
        * tests/transport/rtps/DDS_transport_rtps.mpc:
        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/run_test.pl:
        * tests/transport/rtps/subscriber.cpp:

          New test of the rtps_udp transport type: for now publisher writes
          bytes directly to the socket (not using the OpenDDS transport).
          The subscriber uses the transport.

Wed Sep 14 21:55:18 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/Definitions.h:

          Added ability to set SequenceNumber from two 32-bit values (hi/lo).

        * dds/DCPS/RTPS/MessageTypes.h:
        * dds/DCPS/RTPS/RtpsMessageTypes.idl:

          Moved the SubmessageKind enum into IDL, created a Submessage union.

        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.h:
        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.inl:

          Provide accessor for current DataSampleHeader.

        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.cpp:
        * dds/DCPS/DataSampleHeader.h:

          New call from Recv Strategy to Data Sample Header to let the header
          know how many bytes are remaining in the "pdu".

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:

          Continued implementing RTPS-specific receive strategy logic,
          including adapting the RTPS header data to the DataSampleHeader for
          use by the DCPS layer.

        * tests/DCPS/ConfigTransports/run_test.pl:

          Restored an add_lib_path() which was mistakenly removed yesterday.

Tue Sep 13 19:54:43 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataSampleHeader.inl:
        * dds/DCPS/DataSampleHeader.cpp:

          This new method can't be inlined because ReceivedDataSample
          #includes DataSampleHeader.

Tue Sep 13 19:48:31 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * Merged from trunk r4907 through r4941.
          Attempting to fix bad svn:mergeinfo at the same time.

Tue Sep 13 17:56:55 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataSampleHeader.h:
        * dds/DCPS/DataSampleHeader.inl:

          Added a few inline methods to make it work with the
          TransportReceiveStrategy changes (see below).

        * dds/DCPS/transport/framework/DataLink.h:
        * dds/DCPS/transport/framework/DataLink.inl:
        * dds/DCPS/transport/framework/DataLink.cpp:
        * dds/DCPS/transport/framework/DataLinkSet.inl:
        * dds/DCPS/transport/framework/QueueTaskBase_T.h:
        * dds/DCPS/transport/framework/ReceivedDataSample.h:
        * dds/DCPS/transport/framework/ReceivedDataSample.inl:
        * dds/DCPS/transport/framework/TransportHeader.h:
        * dds/DCPS/transport/framework/TransportReassembly.cpp:
        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.h:
        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.inl:
        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.cpp:
        * dds/DCPS/transport/framework/TransportRegistry.cpp:
        * dds/DCPS/transport/framework/TransportSendStrategy.h:
        * dds/DCPS/transport/framework/TransportSendStrategy.cpp:
        * dds/DCPS/transport/framework/TransportStrategy.h:
        * dds/DCPS/transport/framework/TransportStrategy.cpp:
        * dds/DCPS/transport/framework/TransportStrategy_rch.h:
        * dds/DCPS/transport/multicast/MulticastDataLink.cpp:
        * dds/DCPS/transport/multicast/MulticastReceiveStrategy.h:
        * dds/DCPS/transport/multicast/MulticastSendStrategy.cpp:
        * dds/DCPS/transport/tcp/TcpConnection.cpp:
        * dds/DCPS/transport/tcp/TcpDataLink.h:
        * dds/DCPS/transport/tcp/TcpDataLink.inl:
        * dds/DCPS/transport/tcp/TcpDataLink.cpp:
        * dds/DCPS/transport/tcp/TcpReceiveStrategy.h:
        * dds/DCPS/transport/tcp/TcpReceiveStrategy.cpp:
        * dds/DCPS/transport/tcp/TcpSendStrategy.h:
        * dds/DCPS/transport/tcp/TcpSendStrategy.cpp:
        * dds/DCPS/transport/tcp/TcpSynchResource.h:
        * dds/DCPS/transport/tcp/TcpSynchResource.cpp:
        * dds/DCPS/transport/tcp/TcpTransport.h:
        * dds/DCPS/transport/tcp/TcpTransport.cpp:
        * dds/DCPS/transport/udp/UdpDataLink.cpp:
        * dds/DCPS/transport/udp/UdpReceiveStrategy.h:
        * dds/DCPS/transport/udp/UdpSendStrategy.cpp:

          Refactored transport framework and existing transports to support
          alternate (RTPS) message headers.  The central change is making the
          TransportReceiveStrategy a class template so it is not hard-wired to
          use TransportHeader and DataSampleHeader.  A new class,
          TransportStrategy was created to handle the parts that can't be in
          a template because they are used by the DataLink base class.
          Also changed more transport internal methods to use _rch and
          automatic reference counting instead of raw pointers and manual
          manipulation of the reference count.

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.cpp:

          Added new classes to be the RTPS equivalents of the OpenDDS
          TransportHeader (RTPS Message Header) and DataSampleHeader (RTPS
          Submessage Header and Submessage Elements).  These are just stubbed-
          out for now.

        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp:

          Adapted rtps_udp for the framework changes.

        * tests/DCPS/ConfigTransports/Factory.cpp:
        * tests/DCPS/ConfigTransports/common.cpp:

          Fix some DDS and ACE usage errors (memory / refcount leaks, wrong
          logging format characters).

        * tests/DCPS/ConfigTransports/run_test.pl:

          Remove unused add_lib_path().

        * tests/DCPS/FooTest4/Writer.cpp:

          Cleaned up formatting.  ReceivedDataSample no longer has default ctor.

        * tests/DCPS/Reconnect/DataReaderListener.cpp:

          Can't look at the data sample when !sample_info.valid_data.

        * tests/DCPS/RtpsMessages/RtpsMessagesTest.cpp:

          Fixed compiler warnings.

        * dds/DCPS/transport/framework/TransportReceiveStrategy.h:
        * dds/DCPS/transport/framework/TransportReceiveStrategy.inl:
        * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp:

          Removed these files.  They have been renamed to the *_T.* variants.

Fri Sep  9 21:00:15 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/RTPS/RtpsMessageTypes.idl:

          Removed BuiltinEndpointSetSeq, and changed the field
          ParticipantProxy_t::availableBuiltinEndpoints to have type
          BuiltinEndpointSet_t.  Having a sequence of these doesn't make
          sense, but the spec seems to show it both ways.

        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:

          Implemented the RTPS Message Receiver which maintains state among
          the various submessages that belong to the same message.

Thu Sep  8 23:02:08 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * tools/dissector/giop_base.h:
        * tools/dissector/giop_base.cpp:

          Replaced ACE container with std container, cleaned up function
          pointer and const char* comparison bugs.

        * tools/dissector/packet-opendds.cpp:

          Corrected handling of the new "flags2" byte in DataSampleHeader.
          Sanity checks for sample dissection: if the data is using CDR
          alignment rules, or if it's byte-swapped relative to the wireshark
          host, we can't dissect it with the current implementation.

        * tools/dissector/sample_dissector.cpp:

          Fixed a bug I introduced earlier on the branch.

Thu Sep  8 19:15:42 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataSampleHeader.h:
        * dds/DCPS/DataSampleHeader.inl:
        * dds/DCPS/DataSampleHeader.cpp:
        * tools/dissector/packet-opendds.cpp:

          Added a second flags byte to DataSampleHeader, with the single flag
          for "cdr encapsulation".

        * dds/DCPS/DataWriterImpl.cpp:

          Enable the "cdr encapsulation" flag in DataSampleHeader, if needed.

        * dds/idl/CPPTemplate.txt:

          Marshal and demarshal data in the CDR-compilant way if (on the writer
          side) at least one of our transports require it and (on the reader
          side) the DataSampleHeader indicates CDR encapsualted data.

        * dds/DCPS/WriteDataContainer.cpp:
        * dds/DCPS/transport/framework/NetworkAddress.h:
        * dds/DCPS/transport/framework/RepoIdSet.h:
        * dds/DCPS/transport/framework/RepoIdSetMap.h:

          Removed unused #includes.

        * dds/DCPS/transport/framework/TransportClient.h:
        * dds/DCPS/transport/framework/TransportClient.cpp:
        * dds/DCPS/transport/framework/TransportInst.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.h:

          Added a virtual method to check if a transport requires
          CDR-encapsulated payload data.  TransportClient uses it.

        * dds/DCPS/transport/framework/TransportRegistry.cpp:

          Make rtps_udp a "known" transport so it can be loaded automatically
          when referenced in config files.

        * bin/dcps_tests.lst:
        * tests/DCPS/Messenger/rtps.ini:
        * tests/DCPS/Messenger/run_test.pl:

          Added an RTPS config file for this test.  Currently, this still sends
          the data with tcp, but having rtps_udp as an enabled transport causes
          CDR-encapsulated data marshaling.

Wed Sep  7 22:34:36 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/rtps_udp/OpenDDS_Rtps_Udp.mpc:
        * dds/DCPS/transport/rtps_udp/RtpsUdp.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdp.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.inl:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink_rch.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpLoader.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpLoader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy_rch.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy_rch.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp:
        * dds/DCPS/transport/rtps_udp/Rtps_Udp_Export.h:
        * dds/DCPS/transport/rtps_udp/rtps_udp.rc:

          Added an initial (skeletal) OpenDDS transport type for RTPS over UDP.
          UDP/IP (capable of IPv4 and IPv6; both unicast and multicast) is the
          only PSM in the RTPS specification (v2.1) but other PSMs, or
          implementation-specific transport types, may be used in the future.

Wed Sep  7 18:19:48 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * MPC/config/dcps_rtps.mpb:

          Added an mpb for use by projects that depend on the OpenDDS_Rtps lib.

        * dds/DCPS/RTPS/RtpsMessageTypes.idl:

          Whitespace fix only.

        * dds/idl/marshal_generator.cpp:

          Fixed some corner cases with Parameter and ParameterList.

        * tests/DCPS/Compiler/idl_test3_main/main.cpp:

          The wchar member must be initialized to avoid seeing values outside
          the unicode BMP on systems with 4-byte wchar_t.

        * bin/dcps_tests.lst:
        * tests/DCPS/RtpsMessages/RtpsMessagesTest.cpp:
        * tests/DCPS/RtpsMessages/RtpsMessages.mpc:
        * tests/DCPS/RtpsMessages/run_test.pl:

          New test for RTPS Message serialization.

        * dds/DCPS/RTPS/Test.cpp:

          Removed this file.  Its contents were moved to RtpsMessagesTest.cpp.

Thu Sep  1 17:37:46 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/RTPS/BaseMessageTypes.h:
        * dds/DCPS/RTPS/RtpsBaseMessageTypes.idl:
        * dds/DCPS/RTPS/RtpsMessageTypes.idl:
        * dds/DCPS/RTPS/Test.cpp:
        * dds/DCPS/RTPS/rtps.mpc:

          Completed IDL for RTPS Message types.

        * dds/DCPS/Serializer.h:
        * dds/DCPS/Serializer.inl:

          Implemented a skip() function used to read ahead and ignore bytes.
          read_array() and write_array() don't need to swap if size is 1.

        * dds/idl/marshal_generator.cpp:

          Added special handling for RTPS types that don't follow CDR
          serialization rules: ParameterList, Parameter, SequenceNumberSet,
          FragmentNumberSet, DataSubmessage, DataFragSubmessage,
          InfoReplySubmessage, InfoTimestampSubmessage, InfoReplyIp4Submessage.

Tue Aug 30 22:27:54 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/GuidUtils.h:

          Updated to version 2.1 of RTPS spec.
          Not much has changed in this area.

        * dds/DCPS/RTPS/BaseMessageTypes.h:
        * dds/DCPS/RTPS/MessageTypes.h:
        * dds/DCPS/RTPS/RtpsBaseMessageTypes.idl:
        * dds/DCPS/RTPS/RtpsMessageTypes.idl:

          Updated RTPS structure and constant definitions.

        * dds/DdsDcpsGuid.idl:

          Added more ENTITYKIND_BUILTIN_* constants from RTPS spec.

        * dds/DdsDcpsInfrastructure.idl:

          Even with DDS_HAS_MINIMUM_BIT, RTPS needs to see the Built-In Topic
          struct definitions for use with RTPS discovery.

        * dds/DCPS/Definitions.h:
        * dds/idl/marshal_generator.cpp:

          Fixed warnings.

        * java/dds/OpenDDS/DCPS:

          Ignored Java files generated from DdsDcpsGuid.idl (svn:ignore only).

Tue Aug 30 14:05:01 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/DataSampleHeader.h:
        * dds/DCPS/DataSampleHeader.inl:
        * dds/DCPS/DataSampleHeader.cpp:
        * dds/DCPS/DataWriterImpl.cpp:
        * dds/DCPS/Definitions.h:
        * dds/idl/CPPTemplate.txt:
        * dds/idl/marshal_generator.cpp:
        * dds/idl/metaclass_generator.cpp:
        * dds/DCPS/Serializer.h:
        * dds/DCPS/Serializer.inl:
        * dds/DCPS/transport/framework/DataLink.cpp:
        * dds/DCPS/transport/framework/TransportHeader.inl:

          gen_find_size() and gen_max_marshaled_size() now account for
          optional alignment.
          Use ACE_CDR_BYTE_ORDER instead of TAO_ENCAP_BYTE_ORDER.

        * dds/DCPS/RTPS/BaseMessageUtils.h:
        * dds/DCPS/RTPS/Test.cpp:

          Use CDR alignment for RTPS key hashing.

        * tools/dissector/packet-opendds.cpp:

          Updated for new gen_find_size() function signature.

        * tests/DCPS/Compiler/idl_test1_main/main.cpp:
        * tests/DCPS/Compiler/idl_test3_main/main.cpp:

          Test gen_find_size() and gen_max_marshaled_size() with and without
          alignment.

        * tests/DCPS/KeyTest/IsBounded.cpp:
        * tests/DCPS/KeyTest/KeyMarshaling.cpp:

          Updated for new gen_find_size() function signature and CDR-compliant
          wchar serialization.

Thu Aug 25 22:11:16 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * tools/dissector/sample_dissector.cpp:

          Updated to account for CDR-compliant wchar and wstring serialization.

Thu Aug 25 21:51:34 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * tests/DCPS/Serializer/Serializer.mpc:
        * tests/DCPS/Serializer/AlignmentTest.cpp:
        * tests/DCPS/Serializer/SerializerTest.cpp:

          Added tests for proper data alignment according to CDR rules.

Thu Aug 25 19:21:03 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/Serializer.h:
        * dds/DCPS/Serializer.inl:
        * dds/DCPS/Serializer.cpp:
        * dds/idl/marshal_generator.cpp:

          wchar and wstring serialization are now CDR-compliant.
          Since RTPS leaves the encoding unspecified, we are using UTF-16BE.
          Systems with ACE_SIZEOF_WCHAR == 4 could pass characters larger than
          16-bits.  As of now these are errors (surrogate pairs are not used),
          but in the future this could be implemented.
          Made (almost) every un-typed method private.
          Now using regular C++ bool to represent success/failure return values.

        * tests/DCPS/Serializer/SerializerTest.cpp:
        * tests/DCPS/Serializer_wstring/publisher.cpp:

          Cleaned up test output and removed temp code.

Wed Aug 24 21:59:19 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/Serializer.inl:
        * dds/DCPS/Serializer.cpp:

          Fixed wstring serialization to always use a byte count and not
          a character count.  wstring (and wchar) are still not CDR-compliant.

        * tests/DCPS/Serializer_wstring/DataReaderListener.cpp:
        * tests/DCPS/Serializer_wstring/publisher.cpp:

          Fixed ACE logging format characters and output a message for wchar.

Wed Aug 24 18:59:52 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/RTPS:

          Copied the trunk version -- it didn't come over in the merge.

Wed Aug 24 18:36:46 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/Serializer.h:
        * dds/DCPS/Serializer.inl:
        * dds/DCPS/Serializer.cpp:

          - Strings (narrow only) are now CDR-compliant: they include the null
            terminator byte even though there is no reason to have it.
          - Alignment (CDR rules) can be enabled with an optional 3rd
            constructor argument.
          - Removed unused methods and data members.

        * dds/idl/marshal_generator.cpp:

          gen_max_marshaled_size() and gen_find_size() need to know about the
          modified string serialization.
          Note that these are not yet updated for alignment.

        * tests/DCPS/Compiler/idl_test1_main/main.cpp:
        * tests/DCPS/Compiler/idl_test3_main/main.cpp:

          Updated expected sizes now that strings are CDR-compliant.

        * tests/DCPS/Serializer/SerializerTest.cpp:

          Test that the Serializer with alignment options enabled still
          generates a byte stream that can be de-serialized correctly.
          Still need to test that all CDR alignment rules were followed.

        * tools/dissector/sample_dissector.cpp:

          Updated to account for changed string serialization.  Needs testing.

        * dds/DCPS/transport/multicast/BestEffortSession.h:

          Fixed an artifact of svn merge (duplicated lines).

        * tests/DCPS/Serializer/.cvsignore:

          Removed this file.

Wed Aug 24 16:20:08 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * tests/DCPS/KeyTest:

          Re-added from trunk.  Merging this directory didn't work so it was
          removed in the last commit.

Wed Aug 24 16:01:03 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * Merged from trunk r4455 through r4906.
          Previous work on this branch was incorporated in the trunk as of
          Wed May 18 21:32:29 UTC 2011  Adam Mitz  <mitza@ociweb.com>
          and therefore the previous BranchChangeLog entries have been cleared.
          They can now be found in docs/history/ChangeLog-RTPS-1.

Local Variables:
mode: change-log
add-log-time-format: (lambda () (progn (setq tz (getenv "TZ")) (set-time-zone-rule "UTC") (setq time (format-time-string "%a %b %e %H:%M:%S %Z %Y" (current-time))) (set-time-zone-rule tz) time))
indent-tabs-mode: nil
End:
