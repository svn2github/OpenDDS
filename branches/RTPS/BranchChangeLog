Fri Sep 16 16:29:29 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.inl:

          Cleanup from yesterday's commit.

        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/subscriber.cpp:

          Enhance test -- actually check what we receive.

Thu Sep 15 23:01:58 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * MPC/config/dcps_rtps_udp.mpb:

          New base project for linking the RTPS/UDP transport library.

        * dds/DCPS/transport/framework/TransportClient.cpp:

          Fixed a bug found during testing.  Bug only occurs when the
          destructor runs while there are still datalinks, which shouldn't
          happen in real use cases.

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.inl:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp:

          Continued implementation.

        * bin/dcps_tests.lst:
        * tests/transport/rtps/DDS_transport_rtps.mpc:
        * tests/transport/rtps/publisher.cpp:
        * tests/transport/rtps/run_test.pl:
        * tests/transport/rtps/subscriber.cpp:

          New test of the rtps_udp transport type: for now publisher writes
          bytes directly to the socket (not using the OpenDDS transport).
          The subscriber uses the transport.

Wed Sep 14 21:55:18 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/Definitions.h:

          Added ability to set SequenceNumber from two 32-bit values (hi/lo).

        * dds/DCPS/RTPS/MessageTypes.h:
        * dds/DCPS/RTPS/RtpsMessageTypes.idl:

          Moved the SubmessageKind enum into IDL, created a Submessage union.

        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.h:
        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.inl:

          Provide accessor for current DataSampleHeader.

        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.cpp:
        * dds/DCPS/DataSampleHeader.h:

          New call from Recv Strategy to Data Sample Header to let the header
          know how many bytes are remaining in the "pdu".

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:

          Continued implementing RTPS-specific receive strategy logic,
          including adapting the RTPS header data to the DataSampleHeader for
          use by the DCPS layer.

        * tests/DCPS/ConfigTransports/run_test.pl:

          Restored an add_lib_path() which was mistakenly removed yesterday.

Tue Sep 13 19:54:43 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataSampleHeader.inl:
        * dds/DCPS/DataSampleHeader.cpp:

          This new method can't be inlined because ReceivedDataSample
          #includes DataSampleHeader.

Tue Sep 13 19:48:31 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * Merged from trunk r4907 through r4941.
          Attempting to fix bad svn:mergeinfo at the same time.

Tue Sep 13 17:56:55 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataSampleHeader.h:
        * dds/DCPS/DataSampleHeader.inl:

          Added a few inline methods to make it work with the
          TransportReceiveStrategy changes (see below).

        * dds/DCPS/transport/framework/DataLink.h:
        * dds/DCPS/transport/framework/DataLink.inl:
        * dds/DCPS/transport/framework/DataLink.cpp:
        * dds/DCPS/transport/framework/DataLinkSet.inl:
        * dds/DCPS/transport/framework/QueueTaskBase_T.h:
        * dds/DCPS/transport/framework/ReceivedDataSample.h:
        * dds/DCPS/transport/framework/ReceivedDataSample.inl:
        * dds/DCPS/transport/framework/TransportHeader.h:
        * dds/DCPS/transport/framework/TransportReassembly.cpp:
        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.h:
        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.inl:
        * dds/DCPS/transport/framework/TransportReceiveStrategy_T.cpp:
        * dds/DCPS/transport/framework/TransportRegistry.cpp:
        * dds/DCPS/transport/framework/TransportSendStrategy.h:
        * dds/DCPS/transport/framework/TransportSendStrategy.cpp:
        * dds/DCPS/transport/framework/TransportStrategy.h:
        * dds/DCPS/transport/framework/TransportStrategy.cpp:
        * dds/DCPS/transport/framework/TransportStrategy_rch.h:
        * dds/DCPS/transport/multicast/MulticastDataLink.cpp:
        * dds/DCPS/transport/multicast/MulticastReceiveStrategy.h:
        * dds/DCPS/transport/multicast/MulticastSendStrategy.cpp:
        * dds/DCPS/transport/tcp/TcpConnection.cpp:
        * dds/DCPS/transport/tcp/TcpDataLink.h:
        * dds/DCPS/transport/tcp/TcpDataLink.inl:
        * dds/DCPS/transport/tcp/TcpDataLink.cpp:
        * dds/DCPS/transport/tcp/TcpReceiveStrategy.h:
        * dds/DCPS/transport/tcp/TcpReceiveStrategy.cpp:
        * dds/DCPS/transport/tcp/TcpSendStrategy.h:
        * dds/DCPS/transport/tcp/TcpSendStrategy.cpp:
        * dds/DCPS/transport/tcp/TcpSynchResource.h:
        * dds/DCPS/transport/tcp/TcpSynchResource.cpp:
        * dds/DCPS/transport/tcp/TcpTransport.h:
        * dds/DCPS/transport/tcp/TcpTransport.cpp:
        * dds/DCPS/transport/udp/UdpDataLink.cpp:
        * dds/DCPS/transport/udp/UdpReceiveStrategy.h:
        * dds/DCPS/transport/udp/UdpSendStrategy.cpp:

          Refactored transport framework and existing transports to support
          alternate (RTPS) message headers.  The central change is making the
          TransportReceiveStrategy a class template so it is not hard-wired to
          use TransportHeader and DataSampleHeader.  A new class,
          TransportStrategy was created to handle the parts that can't be in
          a template because they are used by the DataLink base class.
          Also changed more transport internal methods to use _rch and
          automatic reference counting instead of raw pointers and manual
          manipulation of the reference count.

        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsSampleHeader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.h:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.inl:
        * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.cpp:

          Added new classes to be the RTPS equivalents of the OpenDDS
          TransportHeader (RTPS Message Header) and DataSampleHeader (RTPS
          Submessage Header and Submessage Elements).  These are just stubbed-
          out for now.

        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp:

          Adapted rtps_udp for the framework changes.

        * tests/DCPS/ConfigTransports/Factory.cpp:
        * tests/DCPS/ConfigTransports/common.cpp:

          Fix some DDS and ACE usage errors (memory / refcount leaks, wrong
          logging format characters).

        * tests/DCPS/ConfigTransports/run_test.pl:

          Remove unused add_lib_path().

        * tests/DCPS/FooTest4/Writer.cpp:

          Cleaned up formatting.  ReceivedDataSample no longer has default ctor.

        * tests/DCPS/Reconnect/DataReaderListener.cpp:

          Can't look at the data sample when !sample_info.valid_data.

        * tests/DCPS/RtpsMessages/RtpsMessagesTest.cpp:

          Fixed compiler warnings.

        * dds/DCPS/transport/framework/TransportReceiveStrategy.h:
        * dds/DCPS/transport/framework/TransportReceiveStrategy.inl:
        * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp:

          Removed these files.  They have been renamed to the *_T.* variants.

Fri Sep  9 21:00:15 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/RTPS/RtpsMessageTypes.idl:

          Removed BuiltinEndpointSetSeq, and changed the field
          ParticipantProxy_t::availableBuiltinEndpoints to have type
          BuiltinEndpointSet_t.  Having a sequence of these doesn't make
          sense, but the spec seems to show it both ways.

        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:

          Implemented the RTPS Message Receiver which maintains state among
          the various submessages that belong to the same message.

Thu Sep  8 23:02:08 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * tools/dissector/giop_base.h:
        * tools/dissector/giop_base.cpp:

          Replaced ACE container with std container, cleaned up function
          pointer and const char* comparison bugs.

        * tools/dissector/packet-opendds.cpp:

          Corrected handling of the new "flags2" byte in DataSampleHeader.
          Sanity checks for sample dissection: if the data is using CDR
          alignment rules, or if it's byte-swapped relative to the wireshark
          host, we can't dissect it with the current implementation.

        * tools/dissector/sample_dissector.cpp:

          Fixed a bug I introduced earlier on the branch.

Thu Sep  8 19:15:42 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataSampleHeader.h:
        * dds/DCPS/DataSampleHeader.inl:
        * dds/DCPS/DataSampleHeader.cpp:
        * tools/dissector/packet-opendds.cpp:

          Added a second flags byte to DataSampleHeader, with the single flag
          for "cdr encapsulation".

        * dds/DCPS/DataWriterImpl.cpp:

          Enable the "cdr encapsulation" flag in DataSampleHeader, if needed.

        * dds/idl/CPPTemplate.txt:

          Marshal and demarshal data in the CDR-compilant way if (on the writer
          side) at least one of our transports require it and (on the reader
          side) the DataSampleHeader indicates CDR encapsualted data.

        * dds/DCPS/WriteDataContainer.cpp:
        * dds/DCPS/transport/framework/NetworkAddress.h:
        * dds/DCPS/transport/framework/RepoIdSet.h:
        * dds/DCPS/transport/framework/RepoIdSetMap.h:

          Removed unused #includes.

        * dds/DCPS/transport/framework/TransportClient.h:
        * dds/DCPS/transport/framework/TransportClient.cpp:
        * dds/DCPS/transport/framework/TransportInst.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.h:

          Added a virtual method to check if a transport requires
          CDR-encapsulated payload data.  TransportClient uses it.

        * dds/DCPS/transport/framework/TransportRegistry.cpp:

          Make rtps_udp a "known" transport so it can be loaded automatically
          when referenced in config files.

        * bin/dcps_tests.lst:
        * tests/DCPS/Messenger/rtps.ini:
        * tests/DCPS/Messenger/run_test.pl:

          Added an RTPS config file for this test.  Currently, this still sends
          the data with tcp, but having rtps_udp as an enabled transport causes
          CDR-encapsulated data marshaling.

Wed Sep  7 22:34:36 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/transport/rtps_udp/OpenDDS_Rtps_Udp.mpc:
        * dds/DCPS/transport/rtps_udp/RtpsUdp.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdp.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.inl:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink_rch.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpInst.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpLoader.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpLoader.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpReceiveStrategy_rch.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp:
        * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy_rch.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.h:
        * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp:
        * dds/DCPS/transport/rtps_udp/Rtps_Udp_Export.h:
        * dds/DCPS/transport/rtps_udp/rtps_udp.rc:

          Added an initial (skeletal) OpenDDS transport type for RTPS over UDP.
          UDP/IP (capable of IPv4 and IPv6; both unicast and multicast) is the
          only PSM in the RTPS specification (v2.1) but other PSMs, or
          implementation-specific transport types, may be used in the future.

Wed Sep  7 18:19:48 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * MPC/config/dcps_rtps.mpb:

          Added an mpb for use by projects that depend on the OpenDDS_Rtps lib.

        * dds/DCPS/RTPS/RtpsMessageTypes.idl:

          Whitespace fix only.

        * dds/idl/marshal_generator.cpp:

          Fixed some corner cases with Parameter and ParameterList.

        * tests/DCPS/Compiler/idl_test3_main/main.cpp:

          The wchar member must be initialized to avoid seeing values outside
          the unicode BMP on systems with 4-byte wchar_t.

        * bin/dcps_tests.lst:
        * tests/DCPS/RtpsMessages/RtpsMessagesTest.cpp:
        * tests/DCPS/RtpsMessages/RtpsMessages.mpc:
        * tests/DCPS/RtpsMessages/run_test.pl:

          New test for RTPS Message serialization.

        * dds/DCPS/RTPS/Test.cpp:

          Removed this file.  Its contents were moved to RtpsMessagesTest.cpp.

Thu Sep  1 17:37:46 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/RTPS/BaseMessageTypes.h:
        * dds/DCPS/RTPS/RtpsBaseMessageTypes.idl:
        * dds/DCPS/RTPS/RtpsMessageTypes.idl:
        * dds/DCPS/RTPS/Test.cpp:
        * dds/DCPS/RTPS/rtps.mpc:

          Completed IDL for RTPS Message types.

        * dds/DCPS/Serializer.h:
        * dds/DCPS/Serializer.inl:

          Implemented a skip() function used to read ahead and ignore bytes.
          read_array() and write_array() don't need to swap if size is 1.

        * dds/idl/marshal_generator.cpp:

          Added special handling for RTPS types that don't follow CDR
          serialization rules: ParameterList, Parameter, SequenceNumberSet,
          FragmentNumberSet, DataSubmessage, DataFragSubmessage,
          InfoReplySubmessage, InfoTimestampSubmessage, InfoReplyIp4Submessage.

Tue Aug 30 22:27:54 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/GuidUtils.h:

          Updated to version 2.1 of RTPS spec.
          Not much has changed in this area.

        * dds/DCPS/RTPS/BaseMessageTypes.h:
        * dds/DCPS/RTPS/MessageTypes.h:
        * dds/DCPS/RTPS/RtpsBaseMessageTypes.idl:
        * dds/DCPS/RTPS/RtpsMessageTypes.idl:

          Updated RTPS structure and constant definitions.

        * dds/DdsDcpsGuid.idl:

          Added more ENTITYKIND_BUILTIN_* constants from RTPS spec.

        * dds/DdsDcpsInfrastructure.idl:

          Even with DDS_HAS_MINIMUM_BIT, RTPS needs to see the Built-In Topic
          struct definitions for use with RTPS discovery.

        * dds/DCPS/Definitions.h:
        * dds/idl/marshal_generator.cpp:

          Fixed warnings.

        * java/dds/OpenDDS/DCPS:

          Ignored Java files generated from DdsDcpsGuid.idl (svn:ignore only).

Tue Aug 30 14:05:01 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/DataSampleHeader.h:
        * dds/DCPS/DataSampleHeader.inl:
        * dds/DCPS/DataSampleHeader.cpp:
        * dds/DCPS/DataWriterImpl.cpp:
        * dds/DCPS/Definitions.h:
        * dds/idl/CPPTemplate.txt:
        * dds/idl/marshal_generator.cpp:
        * dds/idl/metaclass_generator.cpp:
        * dds/DCPS/Serializer.h:
        * dds/DCPS/Serializer.inl:
        * dds/DCPS/transport/framework/DataLink.cpp:
        * dds/DCPS/transport/framework/TransportHeader.inl:

          gen_find_size() and gen_max_marshaled_size() now account for
          optional alignment.
          Use ACE_CDR_BYTE_ORDER instead of TAO_ENCAP_BYTE_ORDER.

        * dds/DCPS/RTPS/BaseMessageUtils.h:
        * dds/DCPS/RTPS/Test.cpp:

          Use CDR alignment for RTPS key hashing.

        * tools/dissector/packet-opendds.cpp:

          Updated for new gen_find_size() function signature.

        * tests/DCPS/Compiler/idl_test1_main/main.cpp:
        * tests/DCPS/Compiler/idl_test3_main/main.cpp:

          Test gen_find_size() and gen_max_marshaled_size() with and without
          alignment.

        * tests/DCPS/KeyTest/IsBounded.cpp:
        * tests/DCPS/KeyTest/KeyMarshaling.cpp:

          Updated for new gen_find_size() function signature and CDR-compliant
          wchar serialization.

Thu Aug 25 22:11:16 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * tools/dissector/sample_dissector.cpp:

          Updated to account for CDR-compliant wchar and wstring serialization.

Thu Aug 25 21:51:34 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * tests/DCPS/Serializer/Serializer.mpc:
        * tests/DCPS/Serializer/AlignmentTest.cpp:
        * tests/DCPS/Serializer/SerializerTest.cpp:

          Added tests for proper data alignment according to CDR rules.

Thu Aug 25 19:21:03 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/Serializer.h:
        * dds/DCPS/Serializer.inl:
        * dds/DCPS/Serializer.cpp:
        * dds/idl/marshal_generator.cpp:

          wchar and wstring serialization are now CDR-compliant.
          Since RTPS leaves the encoding unspecified, we are using UTF-16BE.
          Systems with ACE_SIZEOF_WCHAR == 4 could pass characters larger than
          16-bits.  As of now these are errors (surrogate pairs are not used),
          but in the future this could be implemented.
          Made (almost) every un-typed method private.
          Now using regular C++ bool to represent success/failure return values.

        * tests/DCPS/Serializer/SerializerTest.cpp:
        * tests/DCPS/Serializer_wstring/publisher.cpp:

          Cleaned up test output and removed temp code.

Wed Aug 24 21:59:19 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/Serializer.inl:
        * dds/DCPS/Serializer.cpp:

          Fixed wstring serialization to always use a byte count and not
          a character count.  wstring (and wchar) are still not CDR-compliant.

        * tests/DCPS/Serializer_wstring/DataReaderListener.cpp:
        * tests/DCPS/Serializer_wstring/publisher.cpp:

          Fixed ACE logging format characters and output a message for wchar.

Wed Aug 24 18:59:52 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/RTPS:

          Copied the trunk version -- it didn't come over in the merge.

Wed Aug 24 18:36:46 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/Serializer.h:
        * dds/DCPS/Serializer.inl:
        * dds/DCPS/Serializer.cpp:

          - Strings (narrow only) are now CDR-compliant: they include the null
            terminator byte even though there is no reason to have it.
          - Alignment (CDR rules) can be enabled with an optional 3rd
            constructor argument.
          - Removed unused methods and data members.

        * dds/idl/marshal_generator.cpp:

          gen_max_marshaled_size() and gen_find_size() need to know about the
          modified string serialization.
          Note that these are not yet updated for alignment.

        * tests/DCPS/Compiler/idl_test1_main/main.cpp:
        * tests/DCPS/Compiler/idl_test3_main/main.cpp:

          Updated expected sizes now that strings are CDR-compliant.

        * tests/DCPS/Serializer/SerializerTest.cpp:

          Test that the Serializer with alignment options enabled still
          generates a byte stream that can be de-serialized correctly.
          Still need to test that all CDR alignment rules were followed.

        * tools/dissector/sample_dissector.cpp:

          Updated to account for changed string serialization.  Needs testing.

        * dds/DCPS/transport/multicast/BestEffortSession.h:

          Fixed an artifact of svn merge (duplicated lines).

        * tests/DCPS/Serializer/.cvsignore:

          Removed this file.

Wed Aug 24 16:20:08 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * tests/DCPS/KeyTest:

          Re-added from trunk.  Merging this directory didn't work so it was
          removed in the last commit.

Wed Aug 24 16:01:03 UTC 2011  Adam Mitz  <mitza@ociweb.com>

        * Merged from trunk r4455 through r4906.
          Previous work on this branch was incorporated in the trunk as of
          Wed May 18 21:32:29 UTC 2011  Adam Mitz  <mitza@ociweb.com>
          and therefore the previous BranchChangeLog entries have been cleared.
          They can now be found in docs/history/ChangeLog-RTPS-1.

Local Variables:
mode: change-log
add-log-time-format: (lambda () (progn (setq tz (getenv "TZ")) (set-time-zone-rule "UTC") (setq time (format-time-string "%a %b %e %H:%M:%S %Z %Y" (current-time))) (set-time-zone-rule tz) time))
indent-tabs-mode: nil
End:
