
This is version 0.5 of TAO DDS.

New to this verion are the following changes:
  - Many memory leaks have been removed.
  - A memory allocation bug has been corrected.
  - The -a option of DCPSInfoRepo now works as documented.

=========================================================================

This is the first release of a Data Distribution Service (DDS).

Point of contact: Scott Harris     harris_s@ociweb.com
                  Paul Calabrese   calabrese_p@ociweb.com

See the User's Guide for an user introduction to the service.

TAO's DDS implementation consists of the following:
* Implementation of the interfaces in the DDS spec and 
  $DDS_ROOT/dds/DCPS

* A service repository driver in $DDS_ROOT/dds/InfoRepo

* Type support generator, dcps_ts.pl, is in $DDS_ROOT/bin
  and its templates are in $DDS_ROOT/bin/DCPS.

* You must use DDS with a version of TAO that has had its 
  TAO_IDL compiler modified to support DDS type definition 
  using the -Gdcps option.  Any OCI version later than 
  TAO 1.4a P4 or DOC group version later than 1.4.6 should
  work.

* An example in $DDS_ROOT/DevGuideExamples/DDS

* Functional tests in $DDS_ROOT/tests

* Performance tests in $DDS_ROOT/performance-tests

=========================================================================

The implementation currently (6/3/05) supports the following features:

An implementation of the "Minimum Profile" (as defined in the spec) with
the following qualifications.

--- supported QoS ----
   Note: all other QoS can only have the default values 
         (as defined in the spec).
  - LIVELINESS.lease_duration = <any period of time>;
  - RELIABILITY.kind = RELIABLE
  - RELIABILITY.kind = BEST_EFFORT
  - HISTORY.kind = KEEP_LAST
    HISTORY.depth = <any value>
  - HISTORY.kind = KEEP_ALL
    RESOURCE_LIMITS.max_samples_per_instance
    RELIABILITY.max_blocking_time = <any period of time>
  - RESOURCE_LIMITS.max_samples
  - RESOURCE_LIMITS.max_instances

--- supported entities ----
DomainParticipantFactory, DomainParticipant, Topic, TopicDescription, Publisher
DataWriter,DataReader, Subscriber, all Listeners.
  - Does not support any Conditions, WaitSet, ContentFilteredTopic or 
    MultiTopic (or the methods on the supported topics related to these 
    classes).

-- listener calls supported ---
--- publisher side --
- on_offered_incompatible_qos
- on_publication_match
--- subscriber side
- on_requested_incompatible_qos
- on_sample_rejected
- on_liveliness_changed
- on_data_available
- on_subscription_match
- on_sample_lost
- on_data_on_readers

  Other call are not supported because they are related to QoS that
  is not supported.

-- Built-In Topics --
The Built-In Topic functionality is available but enabled by default.
The client must call Service_Participant::set_bit(true) to 
enable Built-in Topic support.
The Built-in Topic functionality has some problems (see below).
  
--- data type definition  --
Can define a structure in IDL that will be used as a DDS data type.
The structure may include basic scalar types, strings, sequences,
arrays, enumeration and unions.
It may not contain interfaces or value types.

Zero or more keys can be specified for a data type.

---- supported transports ---
- SimpleTCPTransport
  A TCP based transport.
- SimpleUDPTransport
  A UDP based transport (unreliable delivery).
 
The TAO implementation provides a transport framework that makes it 
easy to add a new transport.


=========================================================================
extra information on the supported QoS

   - LIVELINESS.lease_duration = <any period of time>;
      // set the liveliness heartbeat interval.
      // note: LIVELINESS.kind must be AUTOMATIC

  - RELIABILITY.kind = RELIABLE
    This Qos should be associated with a SimpleTCP transport.
    The SimpleTCP transport is currently the only transport supporting 
    RELIABILITY.kind = RELIABLE.
  
  - RELIABILITY.kind = BEST_EFFORT
    The SimpleUDP transport supports this Qos.

The following two sets of QoS that define the sample queuing behavior 
of samples.

  - HISTORY.kind = KEEP_LAST
    HISTORY.depth = <any value>
    When HISTORY.kind=KEEP_LAST up to HISTORY.depth samples will be held by
    a DataWriter and DataReader.
    If there are HISTORY.depth samples not sent by the publisher's transport 
    then the oldest sample will be "lost" when the write call is made.
    If the transport receives a sample and there are HISTORY.depth NOT_READ 
    samples then the oldest sample will be "lost". 
    See Listener & Status section.
    

  - HISTORY.kind = KEEP_ALL
    RESOURCE_LIMITS.max_samples_per_instance
    RELIABILITY.max_blocking_time = <any period of time>
    
    When HISTORY.kind = KEEP_ALL a write call will block up to
    the RELIABILITY.max_blocking_time because 
    RESOURCE_LIMITS.max_samples_per_instance are already waiting to be
    sent.  The write call will return OK if the sample was queued (to be sent)
    within the timeout period or TIMEOUT if the sample was not queued (because
    the backpressure had not let up).
    HISTORY.kind = KEEP_ALL does not make sense when use with the SimpleUDP 
    transport because the SimpleUDP transport does not confirm that the sample
    was received by the subscriber and hence will never block.
    
    If the transport receives a sample and there are 
    RESOURCE_LIMITS.max_samples_per_instance
    NOT_READ samples the newly received sample will be "rejected".

  - RESOURCE_LIMITS.max_samples
    This QoS determines the maximum number of samples allowed for a given 
    DataWriter or DataReader. In the TAO DDS implementation it also determines 
    the number of pre-allocated memory chunks for sample data.  If the value is 
    UNLIMITED (the default) then the Service_Participant::n_chunks() value will
    be used in place of RESOURCE_LIMITS.max_samples to determine the number of 
    pre-allocated sample chunks.  n_chunks() defaults to 20 but can be
    set by the client code.
    
    Note: unbounded data types do not use the pre-allocated memory for samples 
    but they do use pre-allocated data structures related to samples) so 
    unbounded data types will be less efficient than bounded types.  
    Any type containing a sequence/string without bounds or containing a 
    union (even if it contains all bounded fields) is an unbounded type.
    
    // unbounded  (by any of the fields)
    struct unbounded {
      string name;
      A_Union data;
      sequence<float> values;
    };
    
    // bounded
    struct bounded {
      string<10> name;
      sequence<float,3> values;
    };
    
    
  - RESOURCE_LIMITS.max_instances
    Can be set to any value but is not used by the TAO implementation.



=========================================================================
========= KNOWN LIMITATIONS ===============

-------------------------------------------------------------------------------
) Zero-copy reads (see "2.1.2.5.3.8 read" in the spec) is not supported
  and not tested but it is partially implemented but not tested.
  
  **** Users should not use the zero-copy read functionality ****
  This includes read/take interfaces with <typename>PtrVec parameters,
  return_loan() or passing a <typeName>Seq to read/take with max_len==0.
  **********************************************************************
  
  zero-copy read implementation has the following issues:
  - the zero-copy read impl in TAO outputs a std::vector of sample pointers.
    Should use an ACE_vector or use delayed demarshaling for zero-copy impl.
  - The return_loan() operation is not overloaded to return std::vector.
  - the return_loan() may not "do no harm" if the FooSeq was not zero-copied.
  - The read operation with FooSeq does an "allocate and copy" when the 
    FooSeq indicates that it should zero-copy.
  - Only read() and take() implement the zero copy. Other read and
    take interfaces should.

-------------------------------------------------------------------------------
) Users must ensure that TopicDescriptions are not used after there
  associated Topic is deleted.

-------------------------------------------------------------------------------
) Tests sending large messages quickly may fail sending with
  the following error:
  
  SimpleTcpSendStrategy::send_bytes: ERROR: sendv: Invalid argument
  
  The DataWriter must be deleted and created again to establish
  the connection.

-------------------------------------------------------------------------------
) create_datawriter() does not wait for full association establishment so
  a write shortly after creating the datawriter may be dropped on the 
  publisher side because add_associations() has not completed on the 
  publisher side. 
  The sample may also be dropped on the subscriber side event though 
  the connection exists between the publisher and subscriber when
  the associations have not been mapped on the subscriber side.
  
  If the publisher expects existing DataReaders to receive the
  messages it sends after creating the DataWriter, it must delay
  calling write for the first time for a few seconds.

-------------------------------------------------------------------------------
) Built-in Topic (BIT) support has the following problems:

  1) It is possible that Build-In Topic samples will not
     arrive.  
     This caused by the DCPSInfoRepo writing the values
     before associations use by BIT are fully established
     (as described in the previous limitation note).
     
  2) The DURABILITY.kind=TRANSIENT_LOCAL implementation supporting
     Built-in Topics is a kludge that results in the BIT sample
     values being resent to every subscriber when a new subscriber
     is associated.
     This has little impact on functionality of BIT except
     that the sample state may say it is NOT_READ after
     a client has already read the sample.
     
  3) The framework reads samples in support of its operations
     and hence the sample state may be READ when the client
     has never read the sample.
     
  4) The QoS values in BIT data samples are not updated when an entities QoS
     is set (because the DCPSInfoRepo is not told of the set/update).
     So looking at USER_DATA will work if the USER_DATA was assigned in
     the initial creation of the entity but not if it was set_qos() later.
     But using the USER_DATA QoS is not yet supported anyway.
     
-------------------------------------------------------------------------------
) When Built-in Topic support is not enabled,
  by Service_Participant->set_bit(true), the InstanceHanlde_t values in
  statuses actually RepoIDs. 
  One way to know what it is is to know if your application has enabled BIT.
  Another is that if the InstanceHandle_t value is < 9999 then it
  is not a valid instance handle value but is a RepoId value.

-------------------------------------------------------------------------------
) Calling set_qos() on an entity does not propagate the QoS changes.
  This is currently acceptable because all of the supported QoS are
  Changeable=no.

-------------------------------------------------------------------------------
) Auto_dispose on unregister is not implemented.

-------------------------------------------------------------------------------
) Samples are only rejected for having more than 
  qos.resource_limits.max_samples_per_instance NOT_READ samples in an
  instance.
  
  The implementation should also reject for too many total NOT_READ samples
  or too many instances.
  
  Since the TAO implementation does not have hard limits with respect to
  these values this limitation is considered acceptable.
  
  Note: When more than resource_limits.max_samples are queued
  in the DataReader the heap will be used instead of pre-allocated
  memory.

-------------------------------------------------------------------------------
) There is no check that the Transport implementation supports the given QoS.
  The user should not use the SimpleUDPTransport with
  HISTORY.kind=KEEP_ALL or RELIABILITY.kind = RELIABLE.


-------------------------------------------------------------------------------
) The SampleInfo[].instance_state may be wrong.

  The current implementation assumes that all instances have been written 
  to by all writers so the instance only goes to the NO_WRITERS state 
  when there are no active writers for the whole DataReader (not just 
  the instance).
  
-------------------------------------------------------------------------------
) We have implemented formal/04-12-02 but there is a new version of the
  DDS specification, ptc/05-03-10 that has various improvements and 
  clarifications. 
     

=========================================================================
=== Test Failures =====
Note: A list of test that are run in the nightly automated build/test
      can be found in $DDS_ROOT/bin/dcps_tests.lst
      The nightly automated build/test is run on a Windows XP with 
      VC++ 7.1, Red Hat Linux v9 with gcc and Solaris/x86 with gcc.

* DCPS/BuiltInTopic/run_test.pl <all>
  Occasionally fails.  This is due to BIT limitations given above.

* TAO/orbsvcs/tests/DDS/DCPS/FooTest3_0/run_test.pl resume
  Occasionally fails on Solaris box but passes on Linux and Windows.
  I believe it is a test related timing issue.

* TAO/orbsvcs/tests/DDS/DCPS/FooTest5/run_test.pl blocking
  Occasionally cores while shutingdown on Solaris box 
  but passes on Linux and Windows.




