eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}'
    & eval 'exec perl -S $0 $argv:q'
    if 0;

# $Id$
# -*- perl -*-

# Locate the project - *before* we use it to locate Perl modules
use FindBin;
my $projectRoot;
BEGIN { $projectRoot = "$FindBin::Bin/.."; }

# Locate the link libraries
use Env qw(@LD_LIBRARY_PATH);
unshift @LD_LIBRARY_PATH, "$projectRoot/lib";

# Locate the Perl modules
use lib "$projectRoot/bin";
use PerlACE::Run_Test;

use Getopt::Long qw( :config bundling) ;
use Pod::Usage ;

my $status = 0;
my $failed = 0;

#
# Basic options.
#
my $debug;
my $man;
my $help;
my $verbose;
my $orbVerbose;
my $dFile;
my $rawData;
my $transportDebug;
my $repoDebug;
my $noaction;

#
# Specific options.
#
my $transportType = "tcp";
my $repoHost = "localhost";
my $scenarioFile;

########################################################################
#
# Process the command line.
#
GetOptions( "verbose!"            => \$verbose,
            "v"                   => \$verbose,
            "ORBVerboseLogging|V" => \$orbVerbose,
            "help|?"              => \$help,
            "man"                 => \$man,
            "debug|d=i"           => \$debug,
            "tdebug|T=i"          => \$transportDebug,
            "rdebug|R=i"          => \$repoDebug,
            "noaction|x"          => \$noaction,
            "dfile|f=s"           => \$dFile,
            "rawdatafile|r=s"     => \$rawData,
            "transport|t=s"       => \$transportType,
            "repohost|h=s"        => \$repoHost,
            "scenario|s=s"        => \$scenarioFile,

) or pod2usage( 0) ;
pod2usage( 1)             if $help or not $scenarioFile;
pod2usage( -verbose => 2) if $man;
#
########################################################################

# Verbosity.
print "ProjectRoot==$projectRoot\n"       if $verbose;
print "RepoHost==$repoHost\n"             if $verbose;
print "ScenarioFile==$scenarioFile\n"     if $verbose;
print "RawDataFile==$rawData\n"           if $verbose and $rawData;

print "Debug==$debug\n"                   if $verbose and $debug;
print "RepoDebug==$repoDebug\n"           if $verbose and $repoDebug;
print "TransportDebug==$transportDebug\n" if $verbose and $transportDebug;
print "DebugFile==$dFile\n"               if $verbose and $dFile;
print "VerboseLogging==$orbVerbose\n"     if $verbose and $orbVerbose;

# Files.
my $debugFile;
   $debugFile = PerlACE::LocalFile( $dFile) if $dFile;
my $confFile  = $projectRoot . "/etc/svc.conf";
my $iniFile   = $projectRoot . "/etc/transport.ini";

# Clean out leftovers.
unlink $repo_ior;
unlink $debugFile if $debugFile;

my $svc_config = new PerlACE::ConfigList->check_config ('STATIC') ? ''
    : "-ORBSvcConf $confFile";

my $common_opts = "-DCPSConfigFile $iniFile ";
$common_opts .= "-v " if $verbose;

# Process variables.
my $TEST;

# Establish process arguments.

my $appDebug;
$appDebug  = $debug if $debug;

my $verboseDebug;
$verboseDebug = "-ORBVerboseLogging 1 " if $orbVerbose;

my $appOpts = "$svc_config $common_opts ";
$appOpts .= $verboseDebug if $verboseDebug;
$appOpts .= "-DCPSDebugLevel $appDebug " if $appDebug;
$appOpts .= "-DCPSTransportDebugLevel $transportDebug " if $transportDebug;
$appOpts .= "-ORBLogFile $debugFile " if ($appDebug or $transportDebug) and $debugFile;

# Define the processes.

my $testArgs = "$appOpts ";
$testArgs .= "-DCPSInfoRepo corbaloc:iiop:$repoHost/DCPSInfoRepo ";
$testArgs .= "-t $transportType ";
$testArgs .= "-f $scenarioFile ";
$testArgs .= "-r $rawData " if $rawData;
$testArgs .= "-i 0 ";
if( PerlACE::is_vxworks_test()) {
  $TEST = new PerlACE::ProcessVX( "$FindBin::Bin/testprocess", $testArgs);
} else {
  $TEST = new PerlACE::Process( "$FindBin::Bin/testprocess", $testArgs);
}

# Be verbose.

if( $noaction) {
  print $TEST->CommandLine() . "\n" if $verbose;
  exit;
}

# Fire up the test process.

print "\nTEST\n";
print $TEST->CommandLine() . "\n";
$TEST->Spawn();

# Wait for the testprocess to terminate nicely.  Kill it after 5 minutes
# otherwise.

my $killDelay = 300;
   $killDelay = $duration + 60 if $duration;
$status = $TEST->WaitKill( $killDelay);
if( $status != 0) {
  print STDERR "ERROR: Test returned $status\n";
  ++$failed;
}

# Report results.

if( $failed == 0) {
  print "test PASSED.\n";

} else {
  print STDERR "test FAILED.\n";
}

exit $failed;

=head1 NAME

run_test - Execute the test process for a distributed test.

=head1 SYNOPSIS

./run_test [options]

Options:

  -? | --help            brief help message

  --man                  full documentation

  -x | --noaction        do not execute any processing

  -v | --verbose         be chatty while executing

  -V | --ORBVerboseLogging=NUMBER
                         set the corresponding ORB option

  -d NUMBER | --debug=NUMBER
                         set the DCPS debugging level

  -T NUMBER | --tdebug=NUMBER
                         set the DCPSTransportDebug debugging level

  -R NUMBER | --rdebug=NUMBER
                         set the DCPS debugging level for the repository

  -f FILE | --dfile=FILE set the filename for debug output

  -t NAME | --transport=NAME
                         use NAME transport for test execution - one of
                         (tcp, udp, mc, rmc), default tcp

  -h FQDN | --repohost FQDN
                         fully qualified domain name (and port) for
                         connecting to repository

  -s FILE | --scenario FILE
                         file defining the test scenario to execute

  -r FILE | --rawdatafile FILE
                         file to write collected data to at end of test

=head1 OPTIONS

=over 8

=item B<-?> | B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=item B<-x> | B<--noaction>

Print the commands that would be executed with the current set of command
line options and exit without performing any processing.

=item B<-v> | B<--verbose>

Print additional information while executing.

=item B<-V> | B<--ORBVerboseLogging=NUMBER>

Sets the -ORBVerboseLogging option to NUMBER.

The default value is 0.

The value is set to 1 if the single letter form isused (-V).

=item B<-d NUMBER> | B<--debug=NUMBER>

Sets the -DCPSDebugLevel option value.

The default value is 0.

=item B<-T NUMBER> | B<--tdebug=NUMBER>

Sets the -DCPSTransportDebugLevel option value.

The default value is 0.

=item B<-R NUMBER> | B<--rdebug=NUMBER>

Sets the -DCPSDebugLevel option value for the repository process.

The default value is 0.

=item B<-T NUMBER> | B<--tdebug=NUMBER>

Sets the -DCPSTransportDebugLevel option value.

The default value is 0.

=item B<-f FILE> | B<--dfile=FILE>

Sets the -ORBLogFile option value.

The default value is 0.

=item B<-t NAME> | B<--transport=NAME>

Establishes the transport type to use for the current test execution.

Accepted values are:
  tcp - use the SimpleTCP transport;
  udp - use the SimpleUDP transport;
  mc  - use the SimpleMcast transport;
  rmc - use the ReliableMcast transport.

The default value is 'tcp'.

=item h<-r FQDN> | B<--repohost=FQDN>

This is the fully qualified domain name and port where the OpenDDS
repository may be found.

The default value is 'localhost:2112'.

=item B<-s FILE> | B<--scenario=FILE>

Test scenario definition filename.  This defines the scenario to execute
for the test.  This names an 'ini' style file that contains information
about all publications and subscriptions to execute for this test
execution.

There is no default value, and the test will not execute if not
specified.

=item B<-r FILE> | B<--rawdatafile=FILE>

Raw data output filename.  This file is where any raw latency data
collected during the test will be written.

There is no default value, so no data will be reported by default.

=back

=head1 DESCRIPTION

This test verifies the TRANSPORT_PRIORITY QoS policy support in OpenDDS.
It does so by creating publishers and subscribers and establishing
associations between them at different priority levels.  The ability for
higher priority samples to be delivered preferentially over the lower
priority samples is demonstrated.

=head1 EXAMPLES

=over 8

=item B<./run_test -vx -s s1.ini>

=item B<./run_test -d 10 -T 4 -s test.ini -f test.log -t udp -h localhost:2038>

=item B<./run_test -x -t mcast -s scenario1.ini>

=item B<./run_test -vd10T4Vt mcast -s test.ini -h machine.domain.com:2112>

=back

=cut

__END__

# vim: filetype=perl

