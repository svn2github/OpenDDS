Mon Apr 17 04:22:25 UTC 2007  Yan Dai  <dai_y@ociweb.com>

        * dds\DCPS\DataWriterImpl.cpp:
        
          Corrected the reference counting and added debug logging
          in destructor.
          
        * dds\DCPS\DataReaderImpl.cpp:

          Added debug logging in destructor.
          
Mon Apr 16 23:46:54 UTC 2007  Yan Dai  <dai_y@ociweb.com>
          
        * dds\DCPS\WriteDataContainer.cpp:
        * dds\DCPS\transport\framework\TransportImpl.cpp:
        * dds\DCPS\transport\framework\DataLinkSet.h:
        * dds\DCPS\transport\framework\DataLinkSetMap.cpp:
        * dds\DCPS\DataWriterImpl.cpp:
        * dds\DCPS\DataSampleList.inl:
        * dds\DCPS\DataSampleList.h:
        * dds\DCPS\WriteDataContainer.h:
 
          Made the sub ids list to be an array in the DataSampleElement instead 
          of allocating on heap. Fixed bug that does not send sample to specific
          datalinks for the transient local qos.
          
        * dds\DCPS\DataReaderImpl.cpp:
        
          Fixed a bug that does not synchronize the reference counting 
          on datareader servant. This causes access violation on TCPListener
          test sometimes.  
          
Mon Apr 16 21:37:34 UTC 2007  Ciju John  <johnc at ociweb dot com>

        * dds/DCPS/transport/framework/DataLinkSet.cpp:
          Add missing header file.

Tue Apr  3 23:54:16 UTC 2007  Yan Dai  <dai_y@ociweb.com>

        * dds\InfoRepo\DCPS_IR_Domain.cpp:

          Made the BIT datarwriter in DCPSInfoRepo use the TRANSIENT_LOCAL durability
          qos and added more debug messages.

        * dds\DCPS\DataSampleList.h:
        * dds\DCPS\DataSampleList.inl:

          Added copy constructor that duplicates the sample. The DataSampleListElement
          now has data member of the specific reader ids. If the reader list is nil then the
          sample will be sent to all subscribers.

        * dds\DCPS\WriteDataContainer.cpp:
        * dds\DCPS\WriteDataContainer.h:
        * dds\DCPS\DataWriterImpl.cpp:
        * dds\DCPS\DataWriterImpl.h:
        * dds\DCPS\PublisherImpl.cpp:
        * dds\DCPS\PublisherImpl.h:
        * dds\DCPS\Qos_Helper.inl:

          Supported TRANSIENT_LOCAL_QOS on datawriter. The datawriter will resend all
          current sending and sent samples to the new associated datareaders.

        * dds\DCPS\transport\framework\DataLink.h:
        * dds\DCPS\transport\framework\DataLinkSetMap.h:
        * dds\DCPS\transport\framework\DataLink.cpp:
        * dds\DCPS\transport\framework\DataLink.inl:
        * dds\DCPS\transport\framework\DataLinkSet.h:
        * dds\DCPS\transport\framework\TransportInterface.inl:
        * dds\DCPS\transport\framework\DataLinkSetMap.cpp:
        * dds\DCPS\transport\framework\DataLinkSet.cpp:

          Supported the samples to send to specific datareaders.

        * dds\DCPS\DataReaderImpl.cpp:

          Added a debug logging.

        * performance-tests\DCPS\TCPListenerTest\run_test-1p1s.pl:

          Fixed test failure due to the change of bit disable via configuration file to
          command line option and added bit test case.

        * tests\DCPS\FooTest3_0\run_test.pl:
        * bin\dcps_tests.lst:

          Disabled the reenqueue_all test since it is not applicable. The condition of
          reenqueue_all() call is changed from based on TransientKludge to based on
          TRANSIENT_LOCAL qos and resend the samples in queue to the new associated
          datareader instead of all subscribered datareaders.

Mon Apr  2 18:51:53 UTC 2007  Yan Dai  <dai_y@ociweb.com>

        * dds\DdsDcpsInfrastructure.idl:

          Corrected DCPS_DATA_KEY for TopicBuiltinTopicData.

        * performance-tests\DCPS\TCPListenerTest\run_test-4p1s.pl:
        * performance-tests\DCPS\TCPListenerTest\run_test-2p3s.pl:
        * performance-tests\DCPS\TCPListenerTest\run_test-1p4s.pl:

          Added test cases with the bit turned on.

        * performance-tests\DCPS\TCPListenerTest\conf.ini:

          Removed the DCPSBit=0 configuration and use the command line to disable
          the bit.

Fri Mar 31 00:29:16 UTC 2007  Yan Dai  <dai_y@ociweb.com>

        * dds\DCPS\SubscriberImpl.cpp:

          Fixed a deadlock situation that the reactor thread and the
          thread calling delete_participant acquire locks in reverse
          order. The two involved locks are the si_lock_ in SubscriberImpl
          and the token_ in ACE_Select_Reactor_T. The thread calling
          delete_participant holds the lock in SubscriberImpl and tries to acquire lock
          in select reactor to remove handler while the reactor thread is handling
          an event which holds the lock in reactor. The reactor thread delieved the
          sample to datareader and insert the datareader to the subscriber internal
          cotainer which acquire the lock in SubscriberImpl. Since the lock in
          SubscriberImpl protects the internal data structure, to fix this problem,
          the lock scope in SubscriberImpl was adjusted so that the datareader will
          not hold the lock while calling remove_all_associations().

Fri Mar 30 16:21:25 UTC 2007  Yan Dai  <dai_y@ociweb.com>

        * dds\DCPS\DataReaderImpl.h:
        * dds\DCPS\DataWriterImpl.cpp:
        * dds\DCPS\DataWriterImpl.h:
        * dds\DCPS\DataReaderImpl.cpp:

          Fixed a problem that remove_association will fail look for
          the bit information. A RepoId->InstanceHandler map is added
          to cache the info retrieved upon add_association, any operation
          after will look the cache to get the instance handler for
          listener callback.

        * dds\DCPS\BuiltInTopicUtils.h:

         Changed the fail return to RETCODE_ERROR.

Thu Mar 29 20:59:09 UTC 2007  Yan Dai  <dai_y@ociweb.com>

        * dds\DCPS\transport\framework\TransportImpl.cpp:
        * dds\DCPS\transport\framework\TransportFactory.h:
        * dds\DCPS\transport\framework\TransportFactory.cpp:

          Made the TransportFactory create a new reactor for different
          transport instance. With a single reactor thread, the input of
          one transport will be blocked while another transport is handling
          input. This would solve the problem that lookup instance handle
          by repo id fail via built-in-topic datareader during
          fully_association.

        * tests\DCPS\FooTest3_1\run_test_nokey.pl:
        * tests\DCPS\FooTest3_1\run_test.pl:
        * tests\DCPS\FooTest3_2\run_test.pl:

          Disable BIT on these tests since the subscriber does not request
          an id from DCPSInfoRepo.

Wed Mar 29 06:16:17 UTC 2007  Yan Dai  <dai_y@ociweb.com>

        * dds\DCPS\WriteDataContainer.cpp:

          A wrong version was committed, now commit the correct version.

        * dds\DCPS\Service_Participant.h:

          Updated comments for set_ORB().

Wed Mar 28 20:38:22 UTC 2007  Yan Dai  <dai_y@ociweb.com>

        * dds\DCPS\DdsDcpsInfrastructure.idl:

          Updated the DCPS_DATA_KEY definition for built-in-topic so it can
          generate appropriate KeyLessThan method.

Wed Mar 28 19:53:43 UTC 2007  Yan Dai  <dai_y@ociweb.com> - v571

        * bin\DCPS\CPPTemplate.pm:

          Fixed a bug that an unbounded registration sampple serialization does not allocate
          enought memory and made dispose ignore the case of bit sample not registered since
          it could hanppen.

        * dds\DCPS\DataSampleList.cpp:
        * dds\DCPS\DataSampleList.inl:
        * dds\DCPS\DataSampleList.h:

          Made the next_send_sample_/previous_send_sample link isolated from the
          next_sample_/previous_sample link. When inserting/deleting DataSampleElement to
          one of the links will not change the other link.

        * dds\DCPS\DataReaderImpl.h:

          Added bit accessor.

        * dds\DCPS\WriteDataContainer.cpp:
        * dds\DCPS\WriteDataContainer.h:

          Made all internal list(unsent, sending, released, sent) using
          next_send_sample/previous_send_sample link, instance sample list
          and waiting instance sample list using next_instance_sample link
          and added the sample_holder which use next_sample/previous sample
          link to hold all samples by the order of write.

        * dds\DCPS\transport\simpleUnreliableDgram\SimpleMcastTransport.cpp:

          Corrected the class name in a debug message.

        * dds\DCPS\transport\framework\TransportImpl.cpp:
        * dds\DCPS\transport\framework\RepoIdSetMap.h:
        * dds\DCPS\transport\framework\RepoIdSet.cpp:
        * dds\DCPS\transport\framework\RepoIdSetMap.cpp:
        * dds\DCPS\transport\framework\RepoIdSet.h:

          Fixed a problem that the publisher fully association expect the
          same repo set received as in pending association set. This will
          fail when the subscriber creates multiple datareaders to the same
          topic. The pending association set should be a subset of the
          fully association info from subscriber.

        * dds\DCPS\DataWriterImpl.cpp:

          Moved the reenqueue_all call that supports TRANSIENT_LOCAL from
          add_associations to fully_association. This should avoid the
          sample lost during fully association period.

        * dds\DCPS\BuiltInTopicUtils.h:

          Fixed memory leak of the bit_subscriber get from
          domainparticipant.

        * dds\DCPS\Service_Participant.cpp:
        * dds\DCPS\Service_Participant.h:

          Supported -DCPSBit option in command line and also in DCPS config.
          Made the built-in-topic defaults be on and removed the set_BIT().

        * dds\DCPS\DataReaderImpl.cpp:

          Made the bit datareader remove_association will not covert the repo id
          to the instance handler since the built-in-topic subscriber may
          already deactivated.

        * DevGuideExamples\DDS\Messenger\sub_udp.ini:
        * DevGuideExamples\DDS\Messenger\run_corbaloc_test.pl:
        * DevGuideExamples\DDS\Messenger\pub_mcast.ini:
        * DevGuideExamples\DDS\Messenger\sub_mcast.ini:
        * DevGuideExamples\DDS\Messenger\pub_udp.ini:
        * DevGuideExamples\DDS\Messenger\run_test.pl:
        * DevGuideExamples\DDS\Messenger\run_ns_test.pl:
        * performance-tests\DCPS\SimpleE2ETest\run_test_rejected.pl:
        * performance-tests\DCPS\SimpleE2ETest\subscriber.cpp:
        * performance-tests\DCPS\SimpleE2ETest\run_test_long.pl:
        * performance-tests\DCPS\SimpleE2ETest\run_test.pl:
        * performance-tests\DCPS\SimpleE2ETest\publisher.cpp:
        * performance-tests\DCPS\SimpleLatency\sample_pub.cpp:
        * performance-tests\DCPS\SimpleLatency\sample_sub.cpp:
        * performance-tests\DCPS\SimpleLatency\run_test.pl:
        * performance-tests\DCPS\TCPListenerTest\repo.conf:
        * performance-tests\DCPS\TCPListenerTest\run_test-1p1s.pl:
        * performance-tests\DCPS\TCPListenerTest\run_test-4p1s.pl:
        * performance-tests\DCPS\TCPListenerTest\run_test-2p3s.pl:
        * performance-tests\DCPS\TCPListenerTest\run_test-1p4s.pl:
        * performance-tests\DCPS\TCPListenerTest\conf.ini:
        * performance-tests\DCPS\McastListenerTest\run_test-1p1s.pl:
        * performance-tests\DCPS\McastListenerTest\run_test-1p4s.pl:
        * performance-tests\DCPS\McastListenerTest\run_test-2p3s.pl:
        * performance-tests\DCPS\McastListenerTest\run_test-4p1s.pl:
        * performance-tests\DCPS\UDPListenerTest\run_test-1p1s.pl:
        * performance-tests\DCPS\UDPListenerTest\run_test-1p4s.pl:
        * performance-tests\DCPS\UDPListenerTest\run_test-2p3s.pl:
        * performance-tests\DCPS\UDPListenerTest\run_test-4p1s.pl:
        * performance-tests\DCPS\UDPNoKeyTest\Reader.cpp:
        * performance-tests\DCPS\UDPNoKeyTest\run_test-2pubs.pl:
        * performance-tests\DCPS\UDPNoKeyTest\run_test.pl:
        * tests\DCPS\Messenger_IOGR_Imr\run_test.pl:
        * tests\DCPS\unit\Main.cpp:
        * tests\DCPS\unit\run_test.pl:
        * tests\DCPS\Reconnect\run_test.pl:
        * tests\DCPS\MultiTopicTest\run_test1.pl:
        * tests\DCPS\MultiTopicTest\run_test2.pl:
        * tests\DCPS\MultiTopicTest\run_test3.pl:
        * tests\DCPS\MultiTopicTest\run_test.pl:
        * tests\DCPS\DcpsIntegration\topic.cpp:
        * tests\DCPS\DcpsIntegration\infrastructure.cpp:
        * tests\DCPS\DcpsIntegration\run_test-topic.pl:
        * tests\DCPS\DcpsIntegration\run_test-integration.pl:
        * tests\DCPS\Messenger_Imr\pub.ini:
        * tests\DCPS\Messenger_Imr\sub.ini:
        * tests\DCPS\BuiltInTopic\main.cpp:
        * tests\DCPS\sub_init_loop\run_test.pl:
        * tests\DCPS\Messenger_ZeroCopy\run_test.pl:
        * tests\DCPS\FooTest3_0\run_test.pl:
        * tests\DCPS\FooTest3_1\run_test_nokey.pl:
        * tests\DCPS\FooTest3_1\run_test.pl:
        * tests\DCPS\FooTest4_0\run_test.pl:
        * tests\DCPS\FooTest3_2\run_test.pl:
        * tests\DCPS\FooTest5_0\main.cpp:
        * tests\DCPS\FooTest5_0\run_test.pl:
        * tests\DCPS\DCPSInfoRepo\run_test.pl:
        * tests\DCPS\FooTest4\run_test.pl:
        * tests\DCPS\FooTest5\common.cpp:
        * tests\DCPS\FooTest5\run_test.pl:
        * tests\DCPS\LivelinessTest\run_test.pl:
        * tests\DCPS\MultiDPTest\run_test.pl:

          Fixed the tests to run with the bit turned on. All performance tests
          and a few other tests do not use bit.
