The TAO DDS is an open-source C++ implementation of the Object
Management Group's specification "Data Distribution Service for
Real-time Systems". TAO DDS is built on the ACE
(http://www.theaceorb.com/product/aboutace.html) abstraction layer to
provide platform portability. TAO DDS also leverages capabilities of
TAO (http://www.theaceorb.com/), such as its IDL compiler and as the
basis of the TAO DDS DCPS Information Repository (DCPSInfoRepo).
 
The primary development of TAO DDS was done by the ACE/TAO development
team at Object Computing, Incorporated (http://www.ociweb.com) in
St. Louis and Phoenix. It is released under the same generous license
terms as ACE, TAO and MPC.

This directory structure contains TAO DDS 0.12.

Note that this release is considered beta quality software and
therefore some small interface changes may occur before version 1.0 is
released.

======================================================================
* Documentation

A developer's guide to TAO DDS is available at 
http://download.ociweb.com/DDS/ .

It is also available as a chapter of the TAO Devloper's Guide book
set that can be purchased from 
http://www.theaceorb.com/purchase/index.html .


======================================================================
* Support

OCI strives to make TAO DDS as bug free as possible. If you encounter
any problems with this release please fill out the PROBLEM-REPORT-FORM
file found in this directory and send to support@ociweb.com.

If you desire responsive commercial support for OCI on any problems
you encounter, we strongly recommend that you set up an account before
you actually need help. There is no cost to establish a normal
account.  Support charges only apply to work actually delivered.
However, we do offer premium level accounts for customers with
specific support and enhancement needs, and there may be ongoing
charges for such premium service.  To set up a support account or to
find out more about the support options available, please contact
sales@ociweb.com.

======================================================================
* Features

This release of TAO DDS is based on the DDS Specification
formal/04-12-02. It features the following transport protocols:

** TCP
** Unreliable and reliable multicast
** UDP

TAO DDS has been found to perform better than other similar TAO
services (notification and real-time event channel) by a factor of two
or three. The features offered by the RTEC and NS are similar to DDS,
but not identical, so carefully examine your use-cases before choosing
one service over another. Speed is not the only criterion.

Currently TAO DDS does not support the Data Local Reconstruction Layer
(DLRL) portion of the DDS specification. In addition, support for some
Quality of Service policies is not currently available in TAO DDS. See
the chapter Data Distribution Service that is part of the TAO
Developer's Guide for further information on TAO DDS compliance with
the DDS specification. This chapter is freely available as a PDF file
from the same location where TAO DDS can be downloaded. Some
additional notes about compliance with the DDS specification can be
found below. If you would like have OCI add a features to TAO DDS
please see the Support section for contact information.

======================================================================
* Dependencies

** TAO

TAO DDS requires the use of TAO. This release of TAO DDS has been
tested against the versions of TAO given below. Note that the 1.xa
releases are from OCI and can be obtained from
http://www.theaceorb.com/. The DOC Group releases can be obtained from
http://download.dre.vanderbilt.edu/. For responsive support from OCI
it is recommended that the latest version of the OCI release of TAO
used for TAO DDS development and testing be used.

*** TAO 1.4a patch 16
*** TAO 1.5a
*** A current snapshot of DOC Group's 1.5.x

** MPC

The Makefile, Project, and Workspace Creator (MPC) software is another
OCI developed open source tool and is used to target multiple build
systems from a single set of files. MPC is used for generating TAO DDS
build files such as GNU makefiles or Microsoft Visual Studio solution
files. You can obtain the latest version at
http://www.ociweb.com/products/mpc.

** GNU Make

GNU Make 3.8 was used for automating the compiling and linking of TAO
DDS on Unix and Linux systems.

* Build Targets

* Operating Systems

This release of TAO DDS has been tested under the following platforms:

** Windows XP
** Linux Fedore Core 3
** Linux Fedore Core 6
** SunOS 5.9
** SunOS 5.10

======================================================================
* Compilers

This release of TAO DDS has been tested using the following compilers:

** Visual C++ 7.1
** Visual C++ 8
** gcc 3.3.2
** gcc 4.0.2 with Red Hat modifications
** gcc 4.1.0 with Red Hat modifications
** gcc 4.1.1 with Red Hat modifications
** QNX gcc 3.3.5
** Sun C++ 5.8

* Building and Installing

For building and installation instructions see docs/INSTALL.


======================================================================
* TAO DDS Compliance with the DDS Specification

TAO DDS supports the following capabilities defined in the DDS Specification:

An implementation of the "Minimum Profile" (as defined in the spec) with
the following qualifications.

--- supported QoS ----
   Note: all other QoS can only have the default values
         (as defined in the spec).
  - LIVELINESS.lease_duration = <any period of time>;
  - RELIABILITY.kind = RELIABLE
  - RELIABILITY.kind = BEST_EFFORT
  - HISTORY.kind = KEEP_LAST
    HISTORY.depth = <any value>
  - HISTORY.kind = KEEP_ALL
    RESOURCE_LIMITS.max_samples_per_instance
    RELIABILITY.max_blocking_time = <any period of time>
  - RESOURCE_LIMITS.max_samples
  - RESOURCE_LIMITS.max_instances

--- supported entities ----
DomainParticipantFactory, DomainParticipant, Topic, TopicDescription, Publisher
DataWriter,DataReader, Subscriber, all Listeners.
  - Does not support any Conditions, WaitSet, ContentFilteredTopic or
    MultiTopic (or the methods on the supported topics related to these
    classes).

-- listener calls supported ---
  --- publisher side --
  - on_offered_incompatible_qos
  - on_publication_match
  --- subscriber side
  - on_requested_incompatible_qos
  - on_sample_rejected
  - on_liveliness_changed
  - on_data_available
  - on_subscription_match
  - on_sample_lost
  - on_data_on_readers

  Other call are not supported because they are related to QoS that
  is not supported.

-- Built-In Topics --
The Built-In Topic functionality is available but enabled by default.
The client must call Service_Participant::set_bit(true) to
enable Built-in Topic support.
The Built-in Topic functionality has some problems (see below).

--- data type definition  --
Can define a structure in IDL that will be used as a DDS data type.
The structure may include basic scalar types, strings, sequences,
arrays, enumeration and unions.
It may not contain interfaces or value types.

Zero or more keys can be specified for a data type.

---- supported transports ---
- SimpleTCP
  A TCP based transport.
- SimpleUDP
  A UDP based transport (unreliable delivery).
- SimpleMcast
  A UDP multicast transport (unreliable delivery).
- ReliableMulticast
  A reliable UDP multicast transport

The TAO implementation provides a transport framework that makes it
easy to add a new transport.


** Additional information on the supported QoS

   - LIVELINESS.lease_duration = <any period of time>;
      // set the liveliness heartbeat interval.
      // note: LIVELINESS.kind must be AUTOMATIC

  - RELIABILITY.kind = RELIABLE
    This Qos should be associated with a SimpleTCP transport.
    The SimpleTCP transport is currently the only transport supporting
    RELIABILITY.kind = RELIABLE.

  - RELIABILITY.kind = BEST_EFFORT
    The SimpleUDP transport supports this Qos.

The following two sets of QoS that define the sample queuing behavior
of samples.

  - HISTORY.kind = KEEP_LAST
    HISTORY.depth = <any value>
    When HISTORY.kind=KEEP_LAST up to HISTORY.depth samples will be held by
    a DataWriter and DataReader.
    If there are HISTORY.depth samples not sent by the publisher's transport
    then the oldest sample will be "lost" when the write call is made.
    If the transport receives a sample and there are HISTORY.depth NOT_READ
    samples then the oldest sample will be "lost".
    See Listener & Status section.


  - HISTORY.kind = KEEP_ALL
    RESOURCE_LIMITS.max_samples_per_instance
    RELIABILITY.max_blocking_time = <any period of time>

    When HISTORY.kind = KEEP_ALL a write call will block up to
    the RELIABILITY.max_blocking_time because
    RESOURCE_LIMITS.max_samples_per_instance are already waiting to be
    sent.  The write call will return OK if the sample was queued (to be sent)
    within the timeout period or TIMEOUT if the sample was not queued (because
    the backpressure had not let up).
    HISTORY.kind = KEEP_ALL does not make sense when use with the SimpleUDP
    transport because the SimpleUDP transport does not confirm that the sample
    was received by the subscriber and hence will never block.

    If the transport receives a sample and there are
    RESOURCE_LIMITS.max_samples_per_instance
    NOT_READ samples the newly received sample will be "rejected".

  - RESOURCE_LIMITS.max_samples
    This QoS determines the maximum number of samples allowed for a given
    DataWriter or DataReader. In the TAO DDS implementation it also determines
    the number of pre-allocated memory chunks for sample data.  If the value is
    UNLIMITED (the default) then the Service_Participant::n_chunks() value will
    be used in place of RESOURCE_LIMITS.max_samples to determine the number of
    pre-allocated sample chunks.  n_chunks() defaults to 20 but can be
    set by the client code.

    Note: unbounded data types do not use the pre-allocated memory for samples
    but they do use pre-allocated data structures related to samples) so
    unbounded data types will be less efficient than bounded types.
    Any type containing a sequence/string without bounds or containing a
    union (even if it contains all bounded fields) is an unbounded type.

    // unbounded  (by any of the fields)
    struct unbounded {
      string name;
      A_Union data;
      sequence<float> values;
    };

    // bounded
    struct bounded {
      string<10> name;
      sequence<float,3> values;
    };


  - RESOURCE_LIMITS.max_instances
    Can be set to any value but is not used by the TAO implementation.


======================================================================
* Known Limitations

An instance key must be a base type (not a complex type like array or struct).

This limitation exists because the generated lessThan operator does not 
currently handle complex types.

This limitation can be worked around by specifying multiple keys such that
all of the base types in the complex type are specified.

-------------------------------------------------------------------------------
) Zero-copy reads (see "2.1.2.5.3.8 read" in the spec) 
  have been implemented but with the following limitations:
  1) different sample and info sequence types must be used
     to support zero-copy read.
     --- single-copy read only type ---
     <typename>Seq and ::DDS::SampleInfoSeq
     --- supporting zero-copy read and single-copy read ---
     <typename>ZCSeq and ::TAO::DCPS::SampleInfoZCSeq
     
   2) Only the read and take methods support zero-copy read.
      The read_instance, read_next_instance, take_instance
      and take_next_instance do not support zero-copy read.
      
  !!!! NOTICE: the next release of TAO DDS will resolve the
               limitations listed above.
               The <typename>ZCSeq and ::TAO::DCPS::SampleInfoZCSeq
               types will be removed.

-------------------------------------------------------------------------------
) Users must ensure that TopicDescriptions are not used after there
  associated Topic is deleted.

-------------------------------------------------------------------------------
) Tests sending large messages quickly may fail sending with
  the following error:

  SimpleTcpSendStrategy::send_bytes: ERROR: sendv: Invalid argument

  The DataWriter must be deleted and created again to establish
  the connection.

-------------------------------------------------------------------------------
) create_datawriter() does not wait for full association establishment so
  a write shortly after creating the datawriter may be dropped on the
  publisher side because add_associations() has not completed on the
  publisher side.
  The sample may also be dropped on the subscriber side event though
  the connection exists between the publisher and subscriber when
  the associations have not been mapped on the subscriber side.

  If the publisher expects existing DataReaders to receive the
  messages it sends after creating the DataWriter, it must delay
  calling write for the first time for a few seconds.

-------------------------------------------------------------------------------
) Built-in Topic (BIT) support has the following problems:

  1)  The QoS values in BIT data samples are not updated when an entities QoS
     is set (because the DCPSInfoRepo is not told of the set/update).
     So looking at USER_DATA will work if the USER_DATA was assigned in
     the initial creation of the entity but not if it was set_qos() later.
     But using the USER_DATA QoS is not yet supported anyway.

-------------------------------------------------------------------------------
) When Built-in Topic support is not disabled the InstanceHanlde_t values in
  statuses are actually RepoIDs.
  One way to know what it is is to know if your application has enabled BIT.
  Another is that if the InstanceHandle_t value is < 9999 then it
  is not a valid instance handle value but is a RepoId value.

-------------------------------------------------------------------------------
) Calling set_qos() on an entity does not propagate the QoS changes.
  This is currently acceptable because all of the supported QoS are
  Changeable=no.

-------------------------------------------------------------------------------
) Auto_dispose on unregister is not implemented.

-------------------------------------------------------------------------------
) Samples are only rejected for having more than
  qos.resource_limits.max_samples_per_instance NOT_READ samples in an
  instance.

  The implementation should also reject for too many total NOT_READ samples
  or too many instances.

  Since the TAO implementation does not have hard limits with respect to
  these values this limitation is considered acceptable.

  Note: When more than resource_limits.max_samples are queued
  in the DataReader the heap will be used instead of pre-allocated
  memory.

-------------------------------------------------------------------------------
) There is no check that the Transport implementation supports the given QoS.
  The user should not use the SimpleUDPTransport with
  HISTORY.kind=KEEP_ALL or RELIABILITY.kind = RELIABLE.


-------------------------------------------------------------------------------
) The SampleInfo[].instance_state may be wrong.

  The current implementation assumes that all instances have been written
  to by all writers so the instance only goes to the NO_WRITERS state
  when there are no active writers for the whole DataReader (not just
  the instance).

-------------------------------------------------------------------------------
) We have implemented to formal/04-12-02 (v 1.0 of the DDS spec) 
  but version 1.2 has come out since with various improvements and
  clarifications that may not be implemented.

======================================================================
* Test Failures

Note: A list of tests that are run in the nightly automated build/test
      can be found in $DDS_ROOT/bin/dcps_tests.lst

The following tests currently fail on a significant percentage of builds:
tests/DCPS/Reconnect/run_test.pl restart_pub
tests/DCPS/Reconnect/run_test.pl bp_timeout
tests/DCPS/sub_init_loop/run_test.pl

All three of these were disabled for the prior (0.11) release.  These tests are
for unusual (but not unexpected) situations where applications crash and then
subsequently restart.

