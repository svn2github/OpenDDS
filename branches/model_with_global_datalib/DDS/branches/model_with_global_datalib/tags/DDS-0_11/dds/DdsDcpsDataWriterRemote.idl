// -*- C++ -*-
// $Id$
#ifndef TAO_DDS_DCPS_DATAWRITER_IDL
#define TAO_DDS_DCPS_DATAWRITER_IDL

#include "dds/DdsDcpsInfoUtils.idl"
#include "dds/DdsDcpsInfrastructure.idl"
#include "dds/DdsDcpsPublication.idl"

module TAO {
  module DCPS {

    struct ReaderAssociation {
      TAO::DCPS::TransportInterfaceInfo readerTransInfo;
      TAO::DCPS::RepoId     readerId;
      ::DDS::SubscriberQos subQos;
      ::DDS::DataReaderQos readerQos;
    };

    typedef sequence<ReaderAssociation> ReaderAssociationSeq;

    typedef sequence<TAO::DCPS::RepoId> ReaderIdSeq;

    // This interface contains TAO specific interfaces
    // related to a DDS::DataWriter servant.
    // It is split out so the DDS::DataWriter interface can be local.
    interface DataWriterRemote : ::DDS::DataWriter {

      // will tell transport and call on_publication_match() 
      oneway void add_associations(
        in TAO::DCPS::RepoId yourId,
        in ReaderAssociationSeq readers
        );

      // will tell transport that associations are going away 
      // The notify_lost flag true indicates the remove_association is invoked
      // by the InfoRepo after it detected a lost reader. The InfoRepo detects
      // the lost reader when the add_association/remove_association invocations
      // on the reader object reference fail. The datawriter need notify the
      // the DataWriterListener on_subscription_lost.
      oneway void remove_associations(
        in ReaderIdSeq readers,
        in boolean notify_lost
        );

      // supporting DataWriterListener::on_offered_incompatible_qos()
      // May get called even if add_associations() is not called.
      oneway void update_incompatible_qos(
        in TAO::DCPS::IncompatibleQosStatus status
        );

    };
  }; // module DDS
}; // module TAO

#endif // TAO_DDS_DCPS_DATAWRITER_IDL
