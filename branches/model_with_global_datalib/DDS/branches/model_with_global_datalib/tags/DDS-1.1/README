OpenDDS is an open-source C++ implementation of the
Object Management Group's specification "Data Distribution
Service for Real-time Systems". OpenDDS is built on the ACE
(http://www.theaceorb.com/product/aboutace.html) abstraction layer to
provide platform portability. OpenDDS also leverages capabilities of TAO
(http://www.theaceorb.com/), such as its IDL compiler and as the basis
of the OpenDDS DCPS Information Repository (DCPSInfoRepo).

The primary development of OpenDDS was done by the ACE/TAO development
team at Object Computing, Incorporated (http://www.ociweb.com) in
St. Louis and Phoenix. It is released under the same generous license
terms as ACE, TAO and MPC.

This directory structure contains OpenDDS 1.1.


======================================================================
* Documentation

A developer's guide to OpenDDS is available at
http://download.ociweb.com/OpenDDS/ .

It is also available as a chapter of the TAO Developer's Guide book
set that can be purchased from
http://www.theaceorb.com/purchase/index.html .


======================================================================
* Support

OCI strives to make OpenDDS as bug free as possible. If you encounter
any problems with this release please fill out the PROBLEM-REPORT-FORM
file found in this directory and send to support@ociweb.com.

If you desire responsive commercial support for OCI on any problems
you encounter, we strongly recommend that you set up an account before
you actually need help. There is no cost to establish a normal
account.  Support charges only apply to work actually delivered.
However, we do offer premium level accounts for customers with
specific support and enhancement needs, and there may be ongoing
charges for such premium service.  To set up a support account or to
find out more about the support options available, please contact
sales@ociweb.com.

======================================================================
* Features

This release of OpenDDS is based on the DDS Specification formal/04-12-02
with partial features in areas from formal/07-01-01. It features the
following transport protocols:

** TCP
** Unreliable and reliable multicast
** UDP

OpenDDS has been found to perform better than other similar TAO
services (notification and real-time event channel) by a factor of two
or three. The features offered by the RTEC and NS are similar to DDS,
but not identical, so carefully examine your use-cases before choosing
one service over another. Speed is not the only criterion.

Currently OpenDDS does not support the Data Local Reconstruction Layer
(DLRL) portion of the DDS specification. In addition, support for some
Quality of Service policies is not currently available in OpenDDS. See
the chapter Data Distribution Service that is part of the TAO
Developer's Guide for further information on OpenDDS compliance with
the DDS specification. This chapter is freely available as a PDF file
from the same location where OpenDDS can be downloaded. Some
additional notes about compliance with the DDS specification can be
found below. If you would like have OCI add a features to OpenDDS
please see the Support section for contact information.

======================================================================
* Dependencies

** TAO

OpenDDS requires TAO for both IDL compilation as well as interaction
with the DCPSInfoRepo. At a minimum, you must be at one of the following
versions (or later) in order to properly compile OpenDDS:

*** TAO 1.4a patch 21
*** TAO 1.5a patch 8
*** TAO 1.6.5

Note that the 1.xa releases are from OCI and can be obtained from
http://www.theaceorb.com/. The DOC Group releases can be obtained from
http://download.dre.vanderbilt.edu/.

** GNU Make

GNU Make 3.8 was used for automating the compiling and linking of OpenDDS
on Unix and Linux systems.

** Perl

Perl is needed at build time (for both OpenDDS and applications built
upon OpenDDS).  A Perl script, $DDS_ROOT/bin/dcps_ts.pl, generates the
"type support" code based on the user's IDL definition of DCPS data
types.  Additionally, Perl is used for running the automated tests and
examples included in this source tree, or if you will be generating
Makefiles or Visual Studio project files.  In most cases you will
*not* need to generate Makefiles/project files, but see the
docs/INSTALL file for details.  On Windows platforms, we recommend the
use of ActiveState Perl.

* Build Targets

* Operating Systems

This release of OpenDDS has been tested under the following platforms:

** Windows XP and Server 2003
** RedHat EL 5, x86_64
** RedHat (7.2, 9), x86
** Fedora Core 3, x86_64
** Fedora Core 6, x86
** CentOS 5, x86_64
** Ubuntu 7.10 (Gutsy Gibbon), x86
** Ubuntu 8.04 ("Hardy Heron"), x86
** SunOS 5.9 (x86) and 5.10 (sparc)
** QNX Neutrino 6.3.2 (x86)

======================================================================
* Compilers

This release of OpenDDS has been tested using the following compilers:

** Microsoft Visual C++ 7.1 (Visual Studio .NET 2003)
** Microsoft Visual C++ 8 with SP1 (Visual Studio 2005)
** gcc 3.2.2 with Red Hat modifications
** gcc 3.3.2
** gcc 3.4.4 with Red Hat modifications
** gcc 4.1.1
** gcc 4.1.1 with Red Hat modifications
** gcc 4.1.2 with Red Hat modifications
** gcc 4.1.2 with Ubuntu modifications
** gcc 4.2.3 with Ubuntu modifications
** QNX gcc 3.3.5
** Sun C++ 5.8 Patch 121017-08 2006/12/06

* Building and Installing

For building and installation instructions see docs/INSTALL.


======================================================================
* OpenDDS Compliance with the DDS Specification

OpenDDS supports the following capabilities defined in the DDS
Specification:

An implementation of the "Minimum Profile" (as defined in the spec)
with the following qualifications.

--- supported QoS ----
   Note: all other QoS can only have the default values
         (as defined in the spec).
  - DEADLINE
  - DURABILITY
  - DURABILITY_SERVICE
  - LIFESPAN
  - LIVELINESS.lease_duration = <any period of time>;
  - RELIABILITY.kind = RELIABLE
    RELIABILITY.kind = BEST_EFFORT
  - HISTORY.kind = KEEP_LAST
    HISTORY.depth = <any value>
    HISTORY.kind = KEEP_ALL
  - PARTITION
  - RELIABILITY.max_blocking_time = <any period of time>
  - RESOURCE_LIMITS.max_samples_per_instance
  - RESOURCE_LIMITS.max_samples
  - RESOURCE_LIMITS.max_instances
  - USER_DATA 
  - TOPIC_DATA 
  - GROUP_DATA

--- supported entities ----
DomainParticipantFactory, DomainParticipant, Topic, TopicDescription,
Publisher DataWriter,DataReader, Subscriber, all Listeners.
  - Does not support any Conditions, WaitSet, ContentFilteredTopic or
    MultiTopic (or the methods on the supported topics related to
    these classes).

-- listener calls supported ---
  --- publisher side --
  - on_offered_deadline_missed
  - on_offered_incompatible_qos
  - on_publication_match
  --- subscriber side
  - on_requested_deadline_missed
  - on_requested_incompatible_qos
  - on_sample_rejected
  - on_liveliness_changed
  - on_data_available
  - on_subscription_match
  - on_sample_lost
  - on_data_on_readers

  Other call are not supported because they are related to QoS that
  is not supported.

--- data type definition  --
Can define a structure in IDL that will be used as a DDS data type.
The structure may include basic scalar types, strings, sequences,
arrays, enumeration and unions.
It may not contain interfaces or value types.

Zero or more keys can be specified for a data type.

---- supported transports ---
- SimpleTCP
  A TCP based transport.
- SimpleUDP
  A UDP based transport (unreliable delivery).
- SimpleMcast
  A UDP multicast transport (unreliable delivery).
- ReliableMulticast
  A reliable UDP multicast transport

The TAO implementation provides a transport framework that makes it
easy to add a new transport.


** Additional information on the supported QoS

   - LIVELINESS.lease_duration = <any period of time>;
      // set the liveliness heartbeat interval.
      // note: LIVELINESS.kind must be AUTOMATIC

  - RELIABILITY.kind = RELIABLE
    This Qos should be associated with a SimpleTCP transport.
    The SimpleTCP transport is currently the only transport supporting
    RELIABILITY.kind = RELIABLE.

  - RELIABILITY.kind = BEST_EFFORT
    The SimpleUDP transport supports this Qos.

The following two sets of QoS that define the sample queuing behavior
of samples.

  - HISTORY.kind = KEEP_LAST
    HISTORY.depth = <any value>
    When HISTORY.kind=KEEP_LAST up to HISTORY.depth samples will be
    held by a DataWriter and DataReader.
    If there are HISTORY.depth samples not sent by the publisher's
    transport then the oldest sample will be "lost" when the write
    call is made.  If the transport receives a sample and there are
    HISTORY.depth NOT_READ samples then the oldest sample will be
    "lost".  See Listener & Status section.

  - HISTORY.kind = KEEP_ALL
    RESOURCE_LIMITS.max_samples_per_instance
    RELIABILITY.max_blocking_time = <any period of time>

    When HISTORY.kind = KEEP_ALL a write call will block up to the
    RELIABILITY.max_blocking_time because
    RESOURCE_LIMITS.max_samples_per_instance are already waiting to be
    sent.  The write call will return OK if the sample was queued (to
    be sent) within the timeout period or TIMEOUT if the sample was
    not queued (because the backpressure had not let up).
    HISTORY.kind = KEEP_ALL does not make sense when use with the
    SimpleUDP transport because the SimpleUDP transport does not
    confirm that the sample was received by the subscriber and hence
    will never block.

    If the transport receives a sample and there are
    RESOURCE_LIMITS.max_samples_per_instance
    NOT_READ samples the newly received sample will be "rejected".

  - RESOURCE_LIMITS.max_samples
    This QoS determines the maximum number of samples allowed for a
    given DataWriter or DataReader. In the OpenDDS implementation it
    also determines the number of pre-allocated memory chunks for
    sample data.  If the value is UNLIMITED (the default) then the
    Service_Participant::n_chunks() value will be used in place of
    RESOURCE_LIMITS.max_samples to determine the number of
    pre-allocated sample chunks.  n_chunks() defaults to 20 but can be
    set by the client code.

    Note: unbounded data types do not use the pre-allocated memory for
    samples but they do use pre-allocated data structures related to
    samples) so unbounded data types will be less efficient than
    bounded types.  Any type containing a sequence/string without
    bounds or containing a union (even if it contains all bounded
    fields) is an unbounded type.

    // unbounded  (by any of the fields)
    typedef sequence<float> FloatSeq;
    struct unbounded {
      string name;
      A_Union data;
      FloatSeq values;
    };

    // bounded
    struct bounded {
      string<10> name;
      sequence<float,3> values;
    };

  - RESOURCE_LIMITS.max_instances
    Can be set to any value but is not used by the TAO implementation.


======================================================================
* Known Limitations

----------------------------------------------------------------------
) An instance key must be a base type (not a complex type like array or
  struct).

  This limitation exists because the generated lessThan operator does
  not currently handle complex types.

  This limitation can be worked around by specifying multiple keys such
  that all of the base types in the complex type are specified.

----------------------------------------------------------------------
) Users must ensure that TopicDescriptions are not used after there
  associated Topic is deleted.

----------------------------------------------------------------------
) create_datawriter() does not wait for fully association establishment
  so a write shortly after creating the datawriter may be dropped on
  the publisher side because add_associations() has not completed on
  the publisher side.
  The sample may also be dropped on the subscriber side even though
  the connection exists between the publisher and subscriber when
  the associations have not been mapped on the subscriber side.

  If the publisher expects existing DataReaders to receive the
  messages it sends after creating the DataWriter, it must wait for
  fully association before writing messages. Do following to avoid
  message dropping during association period.

    while (1)
    {
      writer_->get_matched_subscriptions(handles);
      if (handles.length() > 0)
        break;
      else
        ACE_OS::sleep(ACE_Time_Value(0,250000));
    }

----------------------------------------------------------------------
) When Built-in Topic support is disabled the InstanceHandle_t values
  in statuses are actually RepoIDs (the internal ID assigned by the
  DCPSInfoRepo).  Applications should not depend on this behavior.

----------------------------------------------------------------------
) Auto_dispose on unregister is not implemented.

----------------------------------------------------------------------
) Samples are only rejected for having more than
  qos.resource_limits.max_samples_per_instance NOT_READ samples in an
  instance.

  The implementation should also reject for too many total NOT_READ
  samples or too many instances.

  Since the OpenDDS implementation does not have hard limits with
  respect to these values this limitation is considered acceptable.

  Note: When more than resource_limits.max_samples are queued
  in the DataReader the heap will be used instead of pre-allocated
  memory.

----------------------------------------------------------------------
) There is no check that the Transport implementation supports the
  given QoS.  The user should not use the SimpleUDPTransport with
  HISTORY.kind=KEEP_ALL or RELIABILITY.kind = RELIABLE.


----------------------------------------------------------------------
) The SampleInfo[].instance_state may be wrong.

  The current implementation assumes that all instances have been
  written to by all writers so the instance only goes to the
  NO_WRITERS state when there are no active writers for the whole
  DataReader (not just the instance).

----------------------------------------------------------------------
) We have implemented to formal/04-12-02 (v 1.0 of the DDS spec)
  but version 1.2 has come out since with various improvements and
  clarifications that may not be implemented.

----------------------------------------------------------------------
) The DEADLINE QoS policy related
  DDS::{Offered,Requested}DeadlineMissedStatus::last_instance_handle
  field is currently not updated.

----------------------------------------------------------------------
) The DURABILITY_SERVICE service_cleanup_delay support is currently
  experimental.  The corresponding DURABILITY service_cleanup_delay
  support is not available.

----------------------------------------------------------------------
) LIFESPAN support on the publisher side only expires data when using
  a DURABILITY kind other than VOLATILE.

----------------------------------------------------------------------
) Pattern matching capabilities for the PARTITION QoS policy is
  currently limited to wildcards containing '*' and/or '?'.

======================================================================
* Test Failures

Note: A list of tests that are run in the nightly automated build/test
      can be found in $DDS_ROOT/bin/dcps_tests.lst

- The $DDS_ROOT/tests/DCPS/BuiltInTopicTest/prst_repo_run_test.pl test
  currently fails with SEGV on linux x86-64 platforms in the versions
  of TAO 1.4a and 1.5a. The default ACE_DEFAULT_BASE_ADDR 0x0 causes
  the system to choose an address which for some unknown reason causes
  SEGV errors in Malloc_T. Only the test is affected, and this bug does
  not have any impact on the functionality of DDS or user-written code.
  Additionally, this bug in TAO has been addressed and a fix is scheduled
  for inclusion in the next patch release of TAO 1.4a(p22) and 1.5a(p9).
 
 