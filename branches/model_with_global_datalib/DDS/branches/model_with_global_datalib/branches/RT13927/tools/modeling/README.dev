************************************************************************
One-time developer setup

1. Download and install Eclipse 3.5.2 from
   http://archive.eclipse.org/eclipse/downloads/drops/R-3.5.2-201002111343
   (see the "Eclipse SDK" link for your platform).  Eclipse itself only
   requires the Java Runtime Environment (JRE).

2. Install new features in Eclipse (Help -> Install New Software, using
   all available repositories):
     EMF - Eclipse Modeling Framework SDK
     Graphical Modeling Framework SDK
     EMF Validation Framework OCL Integration
   Also, to run a scripted build from the command line, add a new update site
   for http://www.eclipticalsoftware.com/updates and install their feature:
     Ant Support for GMF

3. Create a new workspace located outside the DDS_ROOT checkout (this will hold
   the developer-specific .metadata directory).  Import the OpenDDS Modeling
   projects into this workspace using File -> Import, Existing Projects Into
   Workspace, with the root directory of $DDS_ROOT/tools/modeling.

************************************************************************
Manual code generation steps

I. Generate eCore/EMF code
  a. In the package explorer, expand org.opendds.modeling.model
  b. Expand the "model" folder
  c. Double-click on openDDS.genmodel
  d. In the right pane, right-click on openDDS and select Generate Model Code
  e. In the right pane, right-click on openDDS and select Generate Edit Code
  f. In the right pane, right-click on openDDS and select Generate Editor Code
  g. Repeat the same steps a-f for the org.opendds.modeling.sdk.model project

II. Generate GMF code
  a. In the package explorer, expand org.opendds.modeling.gmf
  b. Expand the "diagrams" folder
  c. Right click on each .gmfgen file and select "Generate diagram code" 

************************************************************************
Automated code generation steps

1. Close Eclipse so the workspace isn't open concurrently with the scripts

2. Read the note at the top of $DDS_ROOT/tools/modeling/build.pl for
   instructions on setting the ECLIPSE_HOME and ECLIPSE_WORKSPACE variables.

3. Run build.pl as follows:
   cd $DDS_ROOT/tools/modeling       |      cd %DDS_ROOT%\tools\modeling
   ./build.pl                        |      build.pl

4. [Optional modificaiton to step 3], add "--automated" to build.pl to also
   build the Java sources into .class files and create .jars.  This is what
   the nightly automated build does, but it's not necessary for using the
   Eclipse IDE interactively, since the "Build Automatically" behavior will
   make sure the "bin" subdirectories always have up-to-date .class files.

************************************************************************
Running tests

1. Run the "setup.pl" Perl script in $DDS_ROOT/tools/modeling/tests
   Note that this script creates modeling_tests.mwc.

2. Run mwc.pl on the just-generated modeling_tests.mwc, using whichever
   mwc.pl arguments are needed for your platform and compiler.

3. Build the workspace that MPC just generated using "make" or an IDE.

4. Use the individual run_test.pl scripts, or run them all together using the
   auto_run_tests.pl script from $DDS_ROOT/bin with the arguments:
     -l $DDS_ROOT/tools/modeling/tests/modeling_tests.lst

************************************************************************
Source Projects (in repository https://svn.dre.vanderbilt.edu/DOC/DDS):

  org.opendds.modeling.model    (at tools/modeling/plugins/org.opendds.modeling.model)
    - Segregated ecore metamodels and profile.

  org.opendds.modeling.gmf      (at tools/modeling/plugins/org.opendds.modeling.gmf)
    - Graphical model capture editor generator based on the ecore profiles.

  org.opendds.modeling.graphics (at tools/modeling/plugins/org.opendds.modeling.graphics)
    - Graphical editor Figure Gallery images used by the graphical model
        capture editor.

  org.opendds.modeling.sdk      (at tools/modeling/plugins/org.opendds.modeling.sdk)
    - OpenDDS Modeling SDK plugin.  This implements a code generation
        editor, to specify and execute the code generation steps.  This
        plug-in will also incorporate the following elements: actions,
        menus, logs, key bindings, perspectives, view, editor, dialogs,
        wizards, preferences, properties, markers, nature, branding

  org.opendds.modeling.help     (at tools/modeling/plugins/org.opendds.modeling.help)
    - Help text, tips, and cheat sheets.

  org.opendds.modeling.feature  (at tools/modeling/features/org.opendds.modeling.feature)
    - OpenDDS Modeling SDK feature defining the plugins comprising the
        deployed feature.

  org.opendds.modeling.site     (at tools/modeling/features/org.opendds.modeling.site)
    - Eclipse update site.  See README.txt in that directory for more details.
      That README also contains notes on the version numbering strategy for
      plugins and its implications on automatic updates for users.

************************************************************************
Generated Projects (partially in repository):

  NOTE: The source of these projects are mostly generated from the
        org.eclipse.modeling.model/models/OpenDDS.genmodel code generation
        specification.  The MANIFEST, XML and properties files controlling
        the behavior of these plugins are retained in the OpenDDS subversion
        repository.  The non-tailored (generated) source files are not
        checked into the repository and need to be generated for use.

  org.opendds.modeling.model.edit        (generated from org.opendds.modeling.model/models/OpenDDS.genmodel)
    - edit support for the ecore metamodels and profile.

  org.opendds.modeling.model.editor      (generated from org.opendds.modeling.model/models/OpenDDS.genmodel)
    - ecore editor for the metamodels and profile.

  org.opendds.modeling.diagram.main      (generated from org.opendds.modeling.gmf/diagrams/MainDiagram.gmfgen)
    - graphical model capture for the top level packages contained in the model.

  org.opendds.modeling.diagram.datalib   (generated from org.opendds.modeling.gmf/diagrams/DataLib.gmfgen)
    - graphical model capture for the data definitions used in the model.

  org.opendds.modeling.diagram.policylib (generated from org.opendds.modeling.gmf/diagrams/PolicyLib.gmfgen)
    - graphical model capture for the QoS policy values used in the model.

************************************************************************
Using the Subversive Subversion plugin, the projects can be checked out
directly into your workspace.

If you check in from within Eclipse using the Subversive plugin, please
extract your subversion commit comments (from your checkin) using the
'svn2cl' command.  A typical command would use options as follows:

  shell> svn2cl -a -i -r <from>:<to> --linelen=78 -o ChangeLog-temp

Where <from> and <to> span the changesets that were checked in from
eclipse.  Then add this generated entry to the top of the ChangeLog (or
BranchChangeLog).

