
project(*Common) : dcps {
  sharedname = StockQuoterCommon
  libout = .

  includes += $(TAO_ROOT)/orbsvcs
  idlflags += -I$(TAO_ROOT)/orbsvcs
  idlflags += -Wb,export_macro=StockQuoterCommon_Export
  idlflags += -Wb,export_include=StockQuoterCommon_Export.h
  dcps_ts_flags += --export=StockQuoterCommon_Export
  dynamicflags = STOCKQUOTERCOMMON_BUILD_DLL

  TypeSupport_Files {
    StockQuoter.idl >> QuoteTypeSupport.idl QuoteTypeSupportImpl.h QuoteTypeSupportImpl.cpp \
                       ExchangeEventTypeSupport.idl ExchangeEventTypeSupportImpl.h ExchangeEventTypeSupportImpl.cpp
  }

  IDL_Files {
    ExchangeEventTypeSupport.idl
    QuoteTypeSupport.idl
    StockQuoter.idl
  }

  Header_Files {
    ExchangeEventTypeSupportImpl.h
    QuoteTypeSupportImpl.h
  }

  Source_Files {
   ExchangeEventTypeSupportImpl.cpp
    QuoteTypeSupportImpl.cpp
  }
} 

project(*Publisher) : dcpsexe, svc_utils {
  after += *Common
  exename   = publisher

  includes += $(TAO_ROOT)/orbsvcs
  libs += StockQuoterCommon
  dynamicflags = STOCKQUOTERCOMMON_HAS_DLL

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
  }

  Source_Files {
    publisher.cpp
  }

  Documentation_Files {
    README.txt
    domain_ids
    dds_tcp_conf.ini
    pub_udp_conf.ini
    sub2_udp_conf.ini
    sub_udp_conf.ini
  }
}


project(*Subscriber) : dcpsexe {
  after += *Common
  exename   = subscriber

  includes += $(TAO_ROOT)/orbsvcs
  libs += StockQuoterCommon
  dynamicflags = STOCKQUOTERCOMMON_HAS_DLL

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
    ExchangeEventDataReaderListenerImpl.h
    QuoteDataReaderListenerImpl.h
  }

  Source_Files {
    ExchangeEventDataReaderListenerImpl.cpp
    QuoteDataReaderListenerImpl.cpp
    subscriber.cpp
  }

  Documentation_Files {
    README.txt
    domain_ids
    dds_tcp_conf.ini
    pub_udp_conf.ini
    sub2_udp_conf.ini
    sub_udp_conf.ini
  }
}
