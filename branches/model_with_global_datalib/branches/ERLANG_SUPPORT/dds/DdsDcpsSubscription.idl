// -*- C++ -*-
// $Id$
#ifndef TAO_DDS_DCPS_SUBSCRIPTION_IDL
#define TAO_DDS_DCPS_SUBSCRIPTION_IDL

#include "dds/DdsDcpsInfrastructure.idl"

module DDS {
    local interface TopicDescription;
    local interface DomainParticipant;
    local interface DataReader;
    local interface Subscriber;

    typedef sequence<DataReader> DataReaderSeq;


    local interface DataReaderListener : Listener {
    void on_requested_deadline_missed(
      in DataReader reader,
      in RequestedDeadlineMissedStatus status);

    void on_requested_incompatible_qos(
      in DataReader reader,
      in RequestedIncompatibleQosStatus status);

    void on_sample_rejected(
      in DataReader reader,
      in SampleRejectedStatus status);

    void on_liveliness_changed(
      in DataReader reader,
      in LivelinessChangedStatus status);

    void on_data_available(
      in DataReader reader);

    void on_subscription_match(
      in DataReader reader,
      in SubscriptionMatchStatus status);

    void on_sample_lost(
      in DataReader reader,
      in SampleLostStatus status);
    };

    local interface SubscriberListener : DataReaderListener {
    void on_data_on_readers(
      in Subscriber subs);
    };


    local interface ReadCondition : Condition {
        SampleStateMask     get_sample_state_mask();
        ViewStateMask       get_view_state_mask();
        InstanceStateMask   get_instance_state_mask();
        DataReader          get_datareader();
    };


    local interface QueryCondition : ReadCondition {
        string         get_query_expression();
        ReturnCode_t   get_query_parameters(
            inout StringSeq query_parameters);
        ReturnCode_t   set_query_parameters(
            in StringSeq query_parameters);
    };


    local interface DataReader : Entity {
    // ReturnCode_t read(
    // 		inout DataSeq received_data,
    // 		inout SampleInfoSeq info_seq,
    // 		in long max_samples,
    //		in SampleStateMask sample_states,
    //		in ViewStateMask view_states,
    //		in InstanceStateMask instance_states);
    // ReturnCode_t take(
    //		inout DataSeq received_data,
    //		inout SampleInfoSeq info_seq,
    //		in long max_samples,
    //		in SampleStateMask sample_states,
    //		in ViewStateMask view_states,
    //		in InstanceStateMask instance_states);
    // ReturnCode_t read_w_condition(
    //		inout DataSeq received_data,
    //		inout SampleInfoSeq info_seq,
    //		in long max_samples,
    //		in ReadCondition a_condition);
    // ReturnCode_t take_w_condition(
    //		inout DataSeq received_data,
    //		inout SampleInfoSeq info_seq,
    //		in long max_samples,
    //		in ReadCondition a_condition);
    // ReturnCode_t read_next_sample(
    //		inout Data received_data,
    //		inout SampleInfo sample_info);
    // ReturnCode_t take_next_sample(
    //		inout Data received_data,
    //		inout SampleInfo sample_info);
    // ReturnCode_t read_instance(
    //		inout DataSeq received_data,
    //		inout SampleInfoSeq info_seq,
    //		in long max_samples,
    //		in InstanceHandle_t a_handle,
    //		in SampleStateMask sample_states,
    //		in ViewStateMask view_states,
    //		in InstanceStateMask instance_states);
    // ReturnCode_t take_instance(
    //		inout DataSeq received_data,
    //		inout SampleInfoSeq info_seq,
    //		in long max_samples,
    //		in InstanceHandle_t a_handle,
    //		in SampleStateMask sample_states,
    //		in ViewStateMask view_states,
    //		in InstanceStateMask instance_states);
    // ReturnCode_t read_next_instance(
    //		inout DataSeq received_data,
    //		inout SampleInfoSeq info_seq,
    //		in long max_samples,
    //		in InstanceHandle_t a_handle,
    //		in SampleStateMask sample_states,
    //		in ViewStateMask view_states,
    //		in InstanceStateMask instance_states);
    // ReturnCode_t take_next_instance(
    //		inout DataSeq received_data,
    //		inout SampleInfoSeq info_seq,
    //		in long max_samples,
    //		in InstanceHandle_t a_handle,
    //		in SampleStateMask sample_states,
    //		in ViewStateMask view_states,
    //		in InstanceStateMask instance_states);
    // ReturnCode_t read_next_instance_w_condition(
    //		inout DataSeq received_data,
    //		inout SampleInfoSeq info_seq,
    //		in long max_samples,
    //		in InstanceHandle_t a_handle,
    //		in ReadCondition a_condition);
    // ReturnCode_t take_next_instance_w_condition(
    //		inout DataSeq received_data,
    //		inout SampleInfoSeq info_seq,
    //		in long max_samples,
    //		in InstanceHandle_t a_handle,
    //		in ReadCondition a_condition);
    // ReturnCode_t return_loan(
    //		inout DataSeq received_data,
    //		inout SampleInfoSeq info_seq);
    // ReturnCode_t get_key_value(
    //		inout Data key_holder,
    //		in InstanceHandle_t handle);

    ReadCondition create_readcondition(
      in SampleStateMask sample_states, 
      in ViewStateMask view_states,
      in InstanceStateMask instance_states);

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
    QueryCondition create_querycondition(
      in SampleStateMask sample_states, 
      in ViewStateMask view_states,
      in InstanceStateMask instance_states,
      in string query_expression,
      in StringSeq query_parameters);
#endif

    ReturnCode_t delete_readcondition(
      in ReadCondition a_condition);

    ReturnCode_t delete_contained_entities();

    ReturnCode_t set_qos(
      in DataReaderQos qos);

    void get_qos(inout DataReaderQos qos);

    ReturnCode_t set_listener(
      in DataReaderListener a_listener,
      in StatusKindMask mask);

    DataReaderListener get_listener();

    TopicDescription get_topicdescription();

    Subscriber get_subscriber();

    SampleRejectedStatus
      get_sample_rejected_status();

    LivelinessChangedStatus
      get_liveliness_changed_status();

    RequestedDeadlineMissedStatus
      get_requested_deadline_missed_status();

    RequestedIncompatibleQosStatus
      get_requested_incompatible_qos_status();

    SubscriptionMatchStatus
      get_subscription_match_status();

    SampleLostStatus
      get_sample_lost_status();

    ReturnCode_t wait_for_historical_data(
      in Duration_t max_wait);

    ReturnCode_t get_matched_publications(
        inout InstanceHandleSeq publication_handles);

#if !defined (DDS_HAS_MINIMUM_BIT)
    ReturnCode_t get_matched_publication_data(
        inout PublicationBuiltinTopicData publication_data,
        in InstanceHandle_t publication_handle);
#endif // !defined (DDS_HAS_MINIMUM_BIT)

    };

    // ----------------------------------------------------------------------
    local interface Subscriber : Entity {
    DataReader create_datareader(
      in TopicDescription a_topic,
      in DataReaderQos qos,
      in DataReaderListener a_listener);

    ReturnCode_t delete_datareader(
      in DataReader a_datareader);

    ReturnCode_t delete_contained_entities();

    DataReader lookup_datareader(
      in string topic_name);

    ReturnCode_t get_datareaders(
      out DataReaderSeq readers,
      in SampleStateMask sample_states,
      in ViewStateMask view_states,
      in InstanceStateMask instance_states);

    void notify_datareaders();

    ReturnCode_t set_qos(
      in SubscriberQos qos);

    void get_qos(
      inout SubscriberQos qos);

    ReturnCode_t set_listener(
      in SubscriberListener a_listener,
      in StatusKindMask mask);

    SubscriberListener get_listener();

    ReturnCode_t begin_access();

    ReturnCode_t end_access();

    DomainParticipant get_participant();

    ReturnCode_t set_default_datareader_qos(
      in DataReaderQos qos);

    void get_default_datareader_qos(inout DataReaderQos qos);

    ReturnCode_t copy_from_topic_qos(
      inout DataReaderQos a_datareader_qos,
      in TopicQos a_topic_qos);
    };

};


module OpenDDS {
  module DCPS {

    struct SubscriptionLostStatus {
      ::DDS::InstanceHandleSeq publication_handles;
    };

    typedef SubscriptionLostStatus SubscriptionDisconnectedStatus;
    typedef SubscriptionLostStatus SubscriptionReconnectedStatus;

    local interface DataReaderListener : ::DDS::DataReaderListener {

      // Called when a connection failure has been detected
      // and there are still associations using the connection
      // after the configurable graceful_disconnected_period.
      void on_subscription_disconnected(
        in ::DDS::DataReader reader,
        in SubscriptionDisconnectedStatus status);

      // Called when a disconnected connection
      // has been reconnected.
      void on_subscription_reconnected(
        in ::DDS::DataReader reader,
        in SubscriptionReconnectedStatus status);

      // called when a connection is lost and hence one
      // or more associations from this subscription to
      // some publishers have been lost.
      // A connection is "lost" when the retry attempts
      // have been exhausted.
      void on_subscription_lost(
        in ::DDS::DataReader reader,
        in SubscriptionLostStatus status);

      // called when the connection object is cleaned up and
      // the reconnect thread exits.
      // This hook is added for testing the reconnect thread
      // leaking problem when the subscriber crashes.
      void on_connection_deleted(
        in ::DDS::DataReader reader);

    };


  }; // End of module DCPS
}; // End of module OpenDDS




#endif /* TAO_DDS_DCPS_SUBSCRIPTION_IDL */
