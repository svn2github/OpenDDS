OpenDDS is an open-source C++ implementation of the
Object Management Group's specification "Data Distribution
Service for Real-time Systems". Although OpenDDS is itself developed in
C++, Java bindings are provided so that Java applications can use
OpenDDS -- see java/README and java/INSTALL for details.

OpenDDS is built on the ACE (http://www.theaceorb.com/product/aboutace.html)
abstraction layer to provide platform portability. OpenDDS also leverages
capabilities of TAO (http://www.theaceorb.com/), such as its IDL compiler
and as the basis of the OpenDDS DCPS Information Repository (DCPSInfoRepo).

The primary development of OpenDDS was done by the ACE/TAO development
team at Object Computing, Incorporated (http://www.ociweb.com) in
St. Louis and Phoenix. It is released under the same generous license
terms as ACE, TAO and MPC.  See the LICENSE file for details.

This directory structure contains OpenDDS 1.3.


======================================================================
* Documentation

A developer's guide to OpenDDS is available at
http://download.ociweb.com/OpenDDS/ .

It is also available as a chapter of the TAO Developer's Guide book
set that can be purchased from
http://www.theaceorb.com/purchase/index.html .


======================================================================
* Support

OCI strives to make OpenDDS as bug free as possible. If you encounter
any problems with this release please fill out the PROBLEM-REPORT-FORM
file found in this directory and send to support@ociweb.com.

If you desire responsive commercial support for OCI on any problems
you encounter, we strongly recommend that you set up an account before
you actually need help. There is no cost to establish a normal
account.  Support charges only apply to work actually delivered.
However, we do offer premium level accounts for customers with
specific support and enhancement needs, and there may be ongoing
charges for such premium service.  To set up a support account or to
find out more about the support options available, please contact
sales@ociweb.com.

======================================================================
* Features

This release of OpenDDS is based on the DDS Specification formal/04-12-02
with partial features in areas from formal/07-01-01. It features the
following transport protocols:

** TCP
** Unreliable and reliable multicast
** UDP

OpenDDS has been found to perform better than other similar TAO
services (notification and real-time event channel) by a factor of two
or three. The features offered by the RTEC and NS are similar to DDS,
but not identical, so carefully examine your use-cases before choosing
one service over another. Speed is not the only criterion.

Currently OpenDDS does not support the Data Local Reconstruction Layer
(DLRL) portion of the DDS specification. In addition, support for some
Quality of Service policies is not currently available in OpenDDS. See
the chapter Data Distribution Service that is part of the TAO
Developer's Guide for further information on OpenDDS compliance with
the DDS specification. This chapter is freely available as a PDF file
from the same location where OpenDDS can be downloaded. Some
additional notes about compliance with the DDS specification can be
found below. If you would like have OCI add a features to OpenDDS
please see the Support section for contact information.

======================================================================
* Dependencies

** TAO

OpenDDS requires TAO for both IDL compilation as well as interaction
with the DCPSInfoRepo. At a minimum, you must be at one of the following
versions (or later) in order to properly compile OpenDDS:

*** TAO 1.4a patch 24 (this is the final release of OpenDDS to support 1.4a)
*** TAO 1.5a patch 14
*** TAO 1.6a patch 1
*** TAO 1.7.1 (DOC Group)

Note that the 1.xa releases are from OCI and can be obtained from
http://www.theaceorb.com/. The DOC Group releases can be obtained from
http://download.dre.vanderbilt.edu/.

** GNU Make

GNU Make 3.80 was used for automating the compiling and linking of OpenDDS
on Unix and Linux systems.

** Perl

Perl is needed at build time (for both OpenDDS and applications built
upon OpenDDS).  A Perl script, $DDS_ROOT/bin/dcps_ts.pl, generates the
"type support" code based on the user's IDL definition of DCPS data
types.  Additionally, Perl is used for running the automated tests and
examples included in this source tree, or if you will be generating
Makefiles or Visual Studio project files.  In most cases you will
*not* need to generate Makefiles/project files, but see the
docs/INSTALL file for details.  On Windows platforms, we recommend the
use of ActiveState Perl.

* Build Targets

* Operating Systems

This release of OpenDDS has been tested under the following platforms:

Linux family:
** RedHat EL 5, x86_64
** RedHat 7.2 and EL 4.2, x86
** Fedora Core 3, x86_64
** Fedora Core 6, x86
** CentOS 5, x86_64
** Ubuntu 8.10, x86

Windows family:
** Windows XP
** Windows Server 2003
** Windows Mobile 6 (ARM)

Others:
** SunOS 5.9 (Solaris 9) (x86) and 5.10 (sparc)
** QNX Neutrino 6.3.2 (x86)
** Macintosh OS X 10.5 "Leopard" (x86)


======================================================================
* Compilers

This release of OpenDDS has been tested using the following compilers:

** Microsoft Visual C++ 7.1 (Visual Studio .NET 2003)
** Microsoft Visual C++ 8 with SP1 (Visual Studio 2005)
** Microsoft Visual C++ 9 with SP1 (Visual Studio 2008)
** gcc 3.3.2
** gcc 3.4.4 (Red Hat 3.4.4-2)
** 4.0.1 (Apple Inc. build 5465)
** gcc 4.1.1
** gcc 4.1.1 (Red Hat 4.1.1-30) (Red Hat 4.1.1-52)
** gcc 4.1.2 (Red Hat 4.1.2-14)
** gcc 4.3.2
** gcc 4.3.2 (Ubuntu 4.3.2-1ubuntu11)
** QNX gcc 3.3.5
** Sun C++ 5.9 SunOS_sparc Patch 124863-01 2007/07/25
** Sun C++ 5.9 SunOS_i386 Patch 124864-07 2008/08/22

* Building and Installing

For building and installation instructions see docs/INSTALL.


======================================================================
* OpenDDS Compliance with the DDS Specification

See opendds.org and the OpenDDS Developer's Guide at
http://download.ociweb.com/OpenDDS/OpenDDS-latest.pdf.

======================================================================
* Known Limitations

----------------------------------------------------------------------
) An instance key must be a base type (not a complex type like array or
  struct).

  This limitation exists because the generated lessThan operator does
  not currently handle complex types.

  This limitation can be worked around by specifying multiple keys such
  that all of the base types in the complex type are specified.

----------------------------------------------------------------------
) Users must ensure that TopicDescriptions are not used after there
  associated Topic is deleted.

----------------------------------------------------------------------
) create_datawriter() does not wait for fully association establishment
  so a write shortly after creating the datawriter may be dropped on
  the publisher side because add_associations() has not completed on
  the publisher side.
  The sample may also be dropped on the subscriber side even though
  the connection exists between the publisher and subscriber when
  the associations have not been mapped on the subscriber side.

  If the publisher expects existing DataReaders to receive the
  messages it sends after creating the DataWriter, it must wait for
  fully association before writing messages. Do following to avoid
  message dropping during association period.

    while (1)
    {
      writer_->get_matched_subscriptions(handles);
      if (handles.length() > 0)
        break;
      else
        ACE_OS::sleep(ACE_Time_Value(0,250000));
    }

----------------------------------------------------------------------
) When Built-in Topic support is disabled the InstanceHandle_t values
  in statuses are actually RepoIDs (the internal ID assigned by the
  DCPSInfoRepo).  Applications should not depend on this behavior.

----------------------------------------------------------------------
) Auto_dispose on unregister is not implemented.

----------------------------------------------------------------------
) Samples are only rejected for having more than
  qos.resource_limits.max_samples_per_instance NOT_READ samples in an
  instance.

  The implementation should also reject for too many total NOT_READ
  samples or too many instances.

  Since the OpenDDS implementation does not have hard limits with
  respect to these values this limitation is considered acceptable.

  Note: When more than resource_limits.max_samples are queued
  in the DataReader the heap will be used instead of pre-allocated
  memory.

----------------------------------------------------------------------
) There is no check that the Transport implementation supports the
  given QoS.  The user should not use the SimpleUDPTransport with
  HISTORY.kind=KEEP_ALL or RELIABILITY.kind = RELIABLE.


----------------------------------------------------------------------
) The SampleInfo[].instance_state may be wrong.

  The current implementation assumes that all instances have been
  written to by all writers so the instance only goes to the
  NO_WRITERS state when there are no active writers for the whole
  DataReader (not just the instance).

----------------------------------------------------------------------
) We have implemented to formal/04-12-02 (v 1.0 of the DDS spec)
  but version 1.2 has come out since with various improvements and
  clarifications that may not be implemented.
  ** Parts of the v1.2 spec have now been implemented.

----------------------------------------------------------------------
) The DEADLINE QoS policy related
  DDS::{Offered,Requested}DeadlineMissedStatus::last_instance_handle
  field is currently not updated.

----------------------------------------------------------------------
) The DURABILITY_SERVICE service_cleanup_delay support is currently
  experimental.  The corresponding DURABILITY service_cleanup_delay
  support is not available.

----------------------------------------------------------------------
) LIFESPAN support on the publisher side only expires data when using
  a DURABILITY kind other than VOLATILE.

======================================================================
* Test Failures

tests/DCPS/Thrasher/run_test.pl high
  This test can fail if there are insufficient system resouces.  The test
  creates 32 application threads that each have their own DomainParticipant,
  Publisher, and DataWriter.

Note: A list of tests that are run in the nightly automated build/test
      can be found in $DDS_ROOT/bin/dcps_tests.lst
