/*
 * $Id$
 *
 * Copyright 2010 Object Computing, Inc.
 *
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

#ifndef TAO_DDS_DCPS_INFO_UTILS_IDL
#define TAO_DDS_DCPS_INFO_UTILS_IDL
#include "dds/DdsDcpsInfrastructure.idl"
#include "dds/DdsDcpsGuid.idl"
#include "tao/OctetSeq.pidl"

module OpenDDS
{
  module DCPS
  {
    // These are unique across a domain
    // They are also the InstanceHandle_t in Sample_Info for built-in Topics
    typedef GUID_t RepoId;

    // Information returned from call to add_domain_participant()
    struct AddDomainStatus {
      RepoId  id;
      boolean federated;
    };

    typedef long TransportInterfaceId;
    typedef CORBA::OctetSeq TransportInterfaceBLOB;

    struct TransportInterfaceInfo {
      /// The transport type (.e.g SimpleTcp or udp)
      TransportInterfaceId   transport_id;
      /// Informationn about the transport instance that is opaque to all but
      /// code specific to that transport implementation.
      TransportInterfaceBLOB data;

      /// This encodes the TRANSPORT_PRIORITY DataWriter Qos policy value
      /// for publications.  The value is set to 0 for subscriptions.
      long publication_transport_priority;
    };

    // Status returned by a topic operation
    enum TopicStatus {
      CREATED,
      ENABLED,
      FOUND,
      NOT_FOUND,
      REMOVED,
      CONFLICTING_TYPENAME,
      INTERNAL_ERROR
    };

    // thrown when operation receives an
    // invalid domain id
    exception Invalid_Domain {};

    // thrown when operation receives an
    // invalid domain participant id
    exception Invalid_Participant {};

    // thrown when operation receives an
    // invalid publication id
    exception Invalid_Publication {};

    // thrown when operation receives an
    // invalid subscription id
    exception Invalid_Subscription {};

    // thrown when operation receives an
    // invalid topic id
    exception Invalid_Topic {};
  

    struct IncompatibleQosStatus {
                  long total_count;
                  long count_since_last_send;
      DDS::QosPolicyId_t last_policy_id;
      DDS::QosPolicyCountSeq policies;
                };


  }; // module DDS
}; // module OpenDDS

#endif /* TAO_DDS_DCPS_INFO_UTILS_IDL */
