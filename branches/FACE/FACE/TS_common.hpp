#ifndef FACE_TS_COMMON_HPP_HEADER_FILE
#define FACE_TS_COMMON_HPP_HEADER_FILE
#include "common.hpp"

namespace FACE {

typedef char CONNECTION_NAME_TYPE[64];

typedef ACE_INT32 MESSAGE_SIZE_TYPE;

typedef ACE_INT64 MESSAGE_TYPE_GUID;

enum CONNECTION_DIRECTION_TYPE {
  SOURCE,
  DESTINATION,
  BI_DIRECTIONAL,
  ONE_WAY_REQUEST_SOURCE,
  ONE_WAY_REQUEST_DESTINATION,
  TWO_WAY_REQUEST_SYNCHRONOUS_SOURCE,
  TWO_WAY_REQUEST_SYNCHRONOUS_DESTINATION,
  TWO_WAY_REQUEST_REPLY_ASYNCHRONOUS_SOURCE,
  TWO_WAY_REQUEST_REPLY_ASYNCHRONOUS_DESTINATION,
  NOT_DEFINED_CONNECTION_DIRECTION_TYPE
};

typedef ACE_INT64 CONNECTION_ID_TYPE;

typedef ACE_INT64 TRANSACTION_ID_TYPE;

enum CONNECTION_TYPE {
  SAMPLING_PORT,
  QUEUING_PORT,
  SOCKET,
  MQ,
  SHM,
  CORBA,
  DDS
};

typedef bool WAITSET_TYPE[32];

enum QUEUING_DISCIPLINE_TYPE {
  FIFO,
  PRIORITY,
  NOT_DEFINED_QUEUING_DISCIPLINE_TYPE
};

enum CONNECTION_DOMAIN_TYPE {
  UNIX,
  INET,
  NOT_DEFINED_CONNECTION_DOMAIN_TYPE
};

enum SOCKET_TYPE {
  STREAM,
  DGRAM,
  SEQPACKET,
  NOT_DEFINED_SOCKET_TYPE
};

enum RECEIVE_FLAG_TYPE {
  PEEK,
  OOB_RECEIVE_FLAG_TYPE,
  WAITALL,
  NOT_DEFINED_RECEIVE_FLAG_TYPE
};

enum SEND_FLAG_TYPE {
  EOR,
  OOB_SEND_FLAG_TYPE,
  NOSIGNAL,
  NOT_DEFINED_SEND_FLAG_TYPE
};

enum VALIDITY_TYPE {
  INVALID,
  VALID
};

enum MESSAGING_PATTERN_TYPE {
  PUB_SUB,
  CLIENT,
  SERVER
};

typedef ACE_INT32 WAITING_RANGE_TYPE;

struct TRANSPORT_CONNECTION_STATUS_TYPE {
  MESSAGE_RANGE_TYPE MESSAGE;
  MESSAGE_RANGE_TYPE MAX_MESSAGE;
  MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
  CONNECTION_DIRECTION_TYPE CONNECTION_DIRECTION;
  WAITING_RANGE_TYPE WAITING_PROCESSES_OR_MESSAGES;
  SYSTEM_TIME_TYPE REFRESH_PERIOD;
  VALIDITY_TYPE LAST_MSG_VALIDITY;
};


}

#endif
